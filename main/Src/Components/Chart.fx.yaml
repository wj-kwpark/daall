Chart As CanvasComponent:
    Colors: |-
        =["#31825d", "#30a667", "#5ec16c", "#f6c790", "#f7c772", "#f7b45b", "#f68f64", "#d46068", "#946eb0", "#769acc", "#60c5ea"]
    Data: |-
        ={
            legends: ["Test 1", "Test 1"],
            labels: ["Label 1","Label 2","Label 3","Label 4","Label 5"],
            table: Table(
                {key:"values", values:[90, 20, 40, 80, 50]}
            )
        }
    Fill: =RGBA(0, 0, 0, 0)
    Height: =500
    Legend: |-
        ={
            enabled: true,
            source: "labels",
            placement: "bottom",
            width: 100,
            height: 45,
            itemGap: 5,
            fontSize: 14,
            fontFamily: "",
            fontWeight: "bold",
            fontStyle: "normal",
            color: "#666666",
            align: "center"
        }
    OnReset: =
    Options: |-
        =Table(
            {key:"",value:""},{key:"pie.dataLabels", value:"true"}
        )
    Subtitle: |-
        ={
            text: "Subtitle",
            height: 12,
            align: "center",
            paddingTop: 12,
            fontSize: 12,
            fontFamily: "",
            fontWeight: "bold",
            fontStyle: "normal",
            color: "#808080",
            additionalStyles: ""
        }
    Title: |-
        ={
            text: "Title",
            height: 20,
            align: "center",
            paddingTop: 10,
            fontSize: 20,
            fontFamily: "",
            fontWeight: "bold",
            fontStyle: "normal",
            color: "#666666",
            additionalStyles: ""
        }
    Type: ="Pie"
    Width: =500
    X: =0
    Y: =0
    ZIndex: =1

    Legend As image:
        FocusedBorderColor: =Legend.BorderColor
        Height: =If(Chart.Legend.placement = "top" || Chart.Legend.placement = "bottom", Chart.Legend.height, Chart.Height)
        HoverBorderColor: =ColorFade(Legend.BorderColor, 20%)
        HoverFill: =ColorFade(Legend.Fill, 20%)
        Image: |-
            =If(Chart.Legend.enabled, Concat(
                Table({
                    items: If(Chart.Legend.source = "labels", Chart.Data.labels, Chart.Data.legends),
                    indexes: ForAll(
                        ForAll(Split(
                            Concat(
                                Table({ 
                                    indexes: ForAll(
                                        ForAll(Split(Coalesce(LookUp(Parent.Options, key="indexes").value, "1,2,3,4,5,6,7,8,9,10"), ","), {Result: ThisRecord.Value}),
                                        Value(Result)
                                    )
                                }),
                                Concat(
                                    RenameColumns(indexes, "Value","baseIndex"), 
                                    Concat(indexes, Text((baseIndex - 1) * CountRows(indexes) + Value), ","),
                                    ","
                                )
                            ), ","), {Result: ThisRecord.Value}),
                        { index: Value(Result) }
                    ) //1, 2, 3, 4, ..., 99, 100
                }),
                Substitute(Substitute(Substitute(Substitute(Substitute(Substitute(
                    Concatenate(
                        "data:image/svg+xml;charset=utf8,", 
                        "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 " & Legend.Width & " " & Legend.Height & "'>",
                        "<g>",
                            "<style>",
                                ".legend{padding:5px;color:" & Chart.Legend.color & ";text-align:" & Chart.Legend.align & ";font-family:" & Chart.Legend.fontFamily & ";font-size:" & Chart.Legend.fontSize & "px;font-weight:" & Chart.Legend.fontWeight & ";font-style:" & Chart.Legend.fontStyle & ";}",
                                ".legend>span{display:inline-block;margin-right:" & Chart.Legend.itemGap & "px;}",
                                ".legend>span>i{display:inline-block;width:1em;height:1em;background-color:silver;margin-right:5px;vertical-align:middle;border:1px solid white;border-radius:20%;}",
                                ".legend>span>span{vertical-align: middle;}",
                                ".legend.legend-aside>span{display:block;margin-bottom:" & Chart.Legend.itemGap & "px;}",
                            "</style>",
                            "<foreignObject x='0' y='0' width='100%' height='100%'>",
                                "<div xmlns='http://www.w3.org/1999/xhtml' class='legend " & If(Chart.Legend.placement = "left" || Chart.Legend.placement = "right", "legend-aside", "") & "'>",
                                    Concat(
                                        ForAll(
                                            FirstN(indexes, CountRows(items)),
                                            {
                                                color:Last(FirstN(Chart.Colors, index)).Value,
                                                text:Last(FirstN(items, index)).Value
                                            }),
                                        Concatenate(
                                            "<span xmlns='http://www.w3.org/1999/xhtml'>",
                                                "<i xmlns='http://www.w3.org/1999/xhtml' style='background-color:" & color & ";'></i>",
                                                "<span xmlns='http://www.w3.org/1999/xhtml'>" & text & "</span>",
                                            "</span>")
                                    ),
                                "</div>",
                            "</foreignObject>",
                        "</g>",
                    "</svg>"),
                    "%", "%25"), "<", "%3C"), ">", "%3E"), "#", "%23"), "{", "%7B"), "}", "%7D")
                )
            )
        PressedBorderColor: =ColorFade(Legend.BorderColor, -20%)
        PressedFill: =ColorFade(Legend.Fill, -20%)
        Width: =If(Chart.Legend.placement = "top" || Chart.Legend.placement = "bottom", Chart.Width, Chart.Legend.width)
        X: = If(Chart.Legend.placement = "right", Round(Chart.Width - Chart.Legend.width, 3), 0)
        Y: =If(Chart.Legend.placement = "bottom", Round(Chart.Height - Chart.Legend.height ,3), Header_1.Height)
        ZIndex: =1

    Pie As image:
        FocusedBorderColor: =Pie.BorderColor
        Height: =PlotArea.Height
        HoverBorderColor: =ColorFade(Pie.BorderColor, 20%)
        HoverFill: =ColorFade(Pie.Fill, 20%)
        Image: |-
            =If(Chart.Type = "Pie", Concat(
                Table({
                    width: PlotArea.Width,
                    height: PlotArea.Height,
                    colors:RenameColumns(Chart.Colors,"Value","color"),
                    indexes: ForAll(
                        ForAll(Split(
                            Concat(
                                Table({ 
                                    indexes: ForAll(
                                        ForAll(Split(Coalesce(LookUp(Parent.Options, key="indexes").value, "1,2,3,4,5,6,7,8,9,10"), ","), {Result: ThisRecord.Value}),
                                        Value(Result)
                                    )
                                }),
                                Concat(
                                    RenameColumns(indexes, "Value","baseIndex"), 
                                    Concat(indexes, Text((baseIndex - 1) * CountRows(indexes) + Value), ","),
                                    ","
                                )
                            ), ","), {Result: ThisRecord.Value}),
                        { index: Value(Result) }
                    ) //1, 2, 3, 4, ..., 99, 100
                }), 
                 Substitute(Substitute(Substitute(Substitute(Substitute(Substitute(
                    Concatenate(
                        "data:image/svg+xml;charset=utf8,", 
                        "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 " & width & " " & height & "'>",
                            Concat(Table({
                                radius:Round(Value(Coalesce(LookUp(Chart.Options, key = "pie.radius").value,"1")),3),
                                innerRadius:Round(Value(LookUp(Chart.Options, key = "pie.innerRadius").value),3),
                                startAngle:Round(Value(LookUp(Chart.Options, key = "pie.startAngle").value),3),
                                semiCircle:LookUp(Chart.Options, key = "pie.semiCircle").value = "true",
                                roseType:LookUp(Chart.Options, key = "pie.roseType").value,
                                dataLabels:{
                                    enabled:LookUp(Chart.Options, key="pie.dataLabels").value = "true",
                                    fontFamily:LookUp(Chart.Options, key = "pie.dataLabels.fontFamily").value,
                                    fontSize:Round(Value(Coalesce(LookUp(Chart.Options, key = "pie.dataLabels.fontSize").value,"20")),3),
                                    fontWeight:Coalesce(LookUp(Chart.Options, key = "pie.dataLabels.fontWeight").value,"bold"),
                                    fontStyle:Coalesce(LookUp(Chart.Options, key = "pie.dataLabels.fontStyle").value,"normal"),
                                    color:Coalesce(LookUp(Chart.Options, key = "pie.dataLabels.color").value,"#666666"),
                                    additionalStyles:LookUp(Chart.Options, key = "pie.dataLabels.additionalStyles").value
                                },
                                labels:Chart.Data.labels,
                                values:LookUp(Chart.Data.table, key="values", values)
                            }),
                            If(CountRows(values) > 0 && Sum(values,Value) > 0,
                                Concat(AddColumns(Table({
                                    dataLabelEnabled: And(dataLabels.enabled, width > (Max(labels,Len(Value)) + 7) * dataLabels.fontSize * 1.2),
                                    rx:Round(width / 2,3),
                                    ry:Round(height / 2,3),
                                    startAngle:If(semiCircle,-180,startAngle),
                                    sum:Sum(values, Value),
                                    data:ForAll(Filter(indexes, index <= CountRows(values)),{
                                        label:Last(FirstN(labels,index)).Value,
                                        value:Last(FirstN(values,index)).Value,
                                        color:Last(FirstN(colors,index)).color,
                                        rotateDegs:Round(If(semiCircle,180,360) * If(roseType = "area", (index - 1) / CountRows(values), Sum(FirstN(values,index - 1),Value) / Sum(values,Value)),3),
                                        degs:Round(If(semiCircle,180,360) * If(roseType = "area", 1 / CountRows(values), Last(FirstN(values,index)).Value / Sum(values,Value)),3)
                                    }),
                                    max:Max(values,Value)
                                }),
                                    "radius", Round(radius * Min(If(dataLabelEnabled,width - (Max(labels,Len(Value)) + 7) * dataLabels.fontSize * 1.2, width), If(semiCircle,height * 2, height)) / 2,3)
                                ),
                                "<style>" &
                                    If(dataLabels.enabled,".data-label{fill:" & dataLabels.color & ";font-family:" & dataLabels.fontFamily & ";font-size:" & dataLabels.fontSize & "px;font-weight:" & dataLabels.fontWeight & ";font-style:" & dataLabels.fontStyle & ";" & dataLabels.additionalStyles &"}") &
                                "</style>" &
                                "<g transform='translate(" & rx & "," & Round(ry + If(semiCircle,radius / 2),3) & ")'>" &
                                    Concat(AddColumns(AddColumns(AddColumns(data,
                                            "outerRadius",If(roseType = "radius",
                                                    Round((value / max) * radius * (1 - innerRadius) + radius * innerRadius,3),
                                                roseType = "area",
                                                    Round(Sqrt((value / max) * (1 - innerRadius * innerRadius) + innerRadius * innerRadius) * radius,3),
                                                    radius),
                                            "innerRadiusValue",Round(radius * innerRadius,3),
                                            "actualRotateDegs", Round(rotateDegs + startAngle,3),
                                            "percentage",Round(value * 100.0 / sum,1) & "%"
                                        ),
                                            "isLargeArc",If(degs >= 180,"1","0"),
                                            "x1",Round(Cos(Radians(degs)) * outerRadius,3),
                                            "y1",Round(Sin(Radians(degs)) * outerRadius,3),
                                            "x2",Round(Cos(Radians(degs)) * innerRadiusValue,3),
                                            "y2",Round(Sin(Radians(degs)) * innerRadiusValue,3),
                                            "xLine",Round(Cos(Radians(actualRotateDegs + degs / 2)) * outerRadius,3),
                                            "yLine",Round(Sin(Radians(actualRotateDegs + degs / 2)) * outerRadius,3)
                                        ),
                                            "xLineEnd",Round(xLine / Abs(xLine) * (radius + 20),3),
                                            "xLabel",Round(xLine / Abs(xLine) * (radius + 25),3),
                                            "labelAnchor",If(xLine > 0,"start","end")
                                        ),
                                        "<path transform='rotate(" & actualRotateDegs & ",0,0)' " &
                                            "d='M" & radius & ",0.01" & 
                                                "A" & radius & "," & radius & ",0," & isLargeArc & ",1," & x1 & "," & y1 &
                                                "L" & x2 & "," & y2 &
                                                "A" & innerRadiusValue & "," & innerRadiusValue & ",0," & isLargeArc & ",0," & innerRadiusValue & ",0.01Z' " &
                                            "fill='" & color & "' stroke-width='0' fill-rule='evenodd'/>" &
                                        If(dataLabelEnabled,
                                            "<path fill='none' stroke-width='1' stroke-opacity='0.4' stroke='" & dataLabels.color & "' d='M"&xLine&","&yLine&"H"&xLineEnd&"'/>" &
                                            "<text class='data-label' x='"&xLabel&"' y='"&yLine&"' dy='.35em' text-anchor='"&labelAnchor&"'>" &
                                                label & ", " & percentage &
                                            "</text>"
                                        )
                                    ) &
                                "</g>"
                            ))),
                        "</svg>"
                    ),
                    "%", "%25"), "<", "%3C"), ">", "%3E"), "#", "%23"), "{", "%7B"), "}", "%7D")
            ))
        PressedBorderColor: =ColorFade(Pie.BorderColor, -20%)
        PressedFill: =ColorFade(Pie.Fill, -20%)
        Width: =PlotArea.Width
        X: =PlotArea.X
        Y: =PlotArea.Y
        ZIndex: =2

    Funnel As image:
        FocusedBorderColor: =Funnel.BorderColor
        Height: =PlotArea.Height
        HoverBorderColor: =ColorFade(Funnel.BorderColor, 20%)
        HoverFill: =ColorFade(Funnel.Fill, 20%)
        Image: |-
            =If(Chart.Type = "Funnel", Concat(
                Table({
                    width: PlotArea.Width,
                    height: PlotArea.Height,
                    colors:RenameColumns(Chart.Colors,"Value","color"),
                    indexes: ForAll(
                        ForAll(Split(
                            Concat(
                                Table({ 
                                    indexes: ForAll(
                                        ForAll(Split(Coalesce(LookUp(Parent.Options, key="indexes").value, "1,2,3,4,5,6,7,8,9,10"), ","), {Result: ThisRecord.Value}),
                                        Value(Result)
                                    )
                                }),
                                Concat(
                                    RenameColumns(indexes, "Value","baseIndex"), 
                                    Concat(indexes, Text((baseIndex - 1) * CountRows(indexes) + Value), ","),
                                    ","
                                )
                            ), ","), {Result: ThisRecord.Value}),
                        { index: Value(Result) }
                    ) //1, 2, 3, 4, ..., 99, 100
                }), 
                 Substitute(Substitute(Substitute(Substitute(Substitute(Substitute(
                    Concatenate(
                        "data:image/svg+xml;charset=utf8,", 
                        "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 " & width & " " & height & "'>",
                            Concat(AddColumns(Table({
                                mode:LookUp(Chart.Options, key="funnel.mode").value,
                                sort:LookUp(Chart.Options, key="funnel.sort").value,
                                align:LookUp(Chart.Options, key="funnel.align").value,
                                maxWidth:Round(Value(Coalesce(LookUp(Chart.Options, key="funnel.maxBarLength").value,"1")),3),
                                itemGap:Round(Value(Coalesce(LookUp(Chart.Options, key="funnel.itemGap").value,"10")),3),
                                connectorColor:LookUp(Chart.Options, key="funnel.connectorColor").value,
                                connectorOpacity:Round(Value(Coalesce(LookUp(Chart.Options, key="funnel.connectorOpacity").value,"0.3")),3),
                                orientation:LookUp(Chart.Options, key="funnel.orientation").value,
                                labelStyle:{
                                    enabled:LookUp(Chart.Options, key = "funnel.labels").value = "true",
                                    align:LookUp(Chart.Options, key = "funnel.labels.align").value,
                                    verticalAlign:LookUp(Chart.Options, key = "funnel.labels.verticalAlign").value,
                                    fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = "funnel.labels.fontSize").value,"20")),3),
                                    fontFamily: LookUp(Chart.Options, key = "funnel.labels.fontFamily").value,
                                    fontWeight: Coalesce(LookUp(Chart.Options, key="funnel.labels.fontWeight").value,"bold"),
                                    fontStyle: Coalesce(LookUp(Chart.Options, key="funnel.labels.fontStyle").value,"normal"),
                                    color: Coalesce(LookUp(Chart.Options, key="funnel.labels.color").value,"#ffffff"),
                                    additionalStyles: LookUp(Chart.Options, key="funnel.labels.additionalStyles").value
                                },
                                dataStyle:{
                                    enabled:LookUp(Chart.Options, key = "funnel.labels.value").value = "true",
                                    dx:Round(Value(Coalesce(LookUp(Chart.Options, key = "funnel.labels.value.dx").value,"0")),3),
                                    dy:Round(Value(Coalesce(LookUp(Chart.Options, key = "funnel.labels.value.dy").value,"0")),3),
                                    format:Coalesce(LookUp(Chart.Options, key = "funnel.labels.value.format").value,"0"),
                                    fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = "funnel.labels.value.fontSize").value,"12")),3),
                                    fontFamily: LookUp(Chart.Options, key = "funnel.labels.value.fontFamily").value,
                                    fontWeight: Coalesce(LookUp(Chart.Options, key="funnel.labels.value.fontWeight").value,"bold"),
                                    fontStyle: Coalesce(LookUp(Chart.Options, key="funnel.labels.value.fontStyle").value,"normal"),
                                    color: Coalesce(LookUp(Chart.Options, key="funnel.labels.value.color").value,"#ffffff"),
                                    additionalStyles: LookUp(Chart.Options, key="funnel.labels.value.additionalStyles").value
                                },
                                percentageStyle:{
                                    enabled:LookUp(Chart.Options, key = "funnel.labels.percentage").value = "true",
                                    mode:LookUp(Chart.Options, key = "funnel.labels.percentage.mode").value,//last,max,sum
                                    dx:Round(Value(Coalesce(LookUp(Chart.Options, key = "funnel.labels.percentage.dx").value,"0")),3),
                                    dy:Round(Value(Coalesce(LookUp(Chart.Options, key = "funnel.labels.percentage.dy").value,"0")),3),
                                    fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = "funnel.labels.percentage.fontSize").value,"12")),3),
                                    fontFamily: LookUp(Chart.Options, key = "funnel.labels.percentage.fontFamily").value,
                                    fontWeight: Coalesce(LookUp(Chart.Options, key="funnel.labels.percentage.fontWeight").value,"bold"),
                                    fontStyle: Coalesce(LookUp(Chart.Options, key="funnel.labels.percentage.fontStyle").value,"normal"),
                                    color: Coalesce(LookUp(Chart.Options, key="funnel.labels.percentage.color").value,"#ffffff"),
                                    additionalStyles: LookUp(Chart.Options, key="funnel.labels.percentage.additionalStyles").value
                                },
                                labels:Chart.Data.labels,
                                values:ForAll(LookUp(Chart.Data.table, key="values").values,{Value:Round(Value(Value),3)})
                            }),
                                "width",If(orientation = "horizontal",height,width),
                                "height",If(orientation = "horizontal",width,height),
                                "cx",Round(width / 2,3),
                                "cy",Round(height / 2,3)
                            ),
                            If(CountRows(values) > 0 && Sum(values,Value) > 0,
                                Concat(Table({
                                    data:ForAll(FirstN(indexes, CountRows(values)),{
                                        index:index,
                                        label:Last(FirstN(labels,index)).Value,
                                        value:Last(FirstN(values,index)).Value,
                                        color:Last(FirstN(colors,index)).color
                                    }),
                                    max:Max(values,Value),
                                    maxWidth:Round(width * maxWidth,3),
                                    sum:Round(Sum(values,Value),3),
                                    barContainerHeight:Round((height + itemGap) / CountRows(values),3),
                                    align:If((orientation <> "horizontal" && align = "left") || (orientation = "horizontal" && align = "bottom"),"start",(orientation <> "horizontal" && align = "right") || (orientation = "horizontal" && align = "top"),"end","middle")
                                }),
                                "<g transform='translate(" & Round(Switch(align,"start",0,"end",width,cx),3) & ",0)" & 
                                    If(orientation = "horizontal", "rotate(-90,0,0)translate("& Round(If(align = "start",-width,align="end",0,-cy),3) &","&Round(If(align = "start",0,align="end",-width,-cx),3)&")") & "'>" &
                                    "<style>" &
                                    If(labelStyle.enabled,".data-label{fill:" & labelStyle.color & ";font-family:" & labelStyle.fontFamily & ";font-size:" & labelStyle.fontSize & "px;font-weight:" & labelStyle.fontWeight & ";font-style:" & labelStyle.fontStyle & ";" & labelStyle.additionalStyles &"}") &
                                    If(dataStyle.enabled,".value-label{fill:" & dataStyle.color & ";font-family:" & dataStyle.fontFamily & ";font-size:" & dataStyle.fontSize & "px;font-weight:" & dataStyle.fontWeight & ";font-style:" & dataStyle.fontStyle & ";" & dataStyle.additionalStyles &"}") &
                                    If(percentageStyle.enabled,".percentage-label{fill:" & percentageStyle.color & ";font-family:" & percentageStyle.fontFamily & ";font-size:" & percentageStyle.fontSize & "px;font-weight:" & percentageStyle.fontWeight & ";font-style:" & percentageStyle.fontStyle & ";" & percentageStyle.additionalStyles &"}") &
                                    "</style>" &
                                    Concat(AddColumns(Table({data:ForAll(FirstN(indexes, CountRows(values)),{
                                            index:index,
                                            d:Last(FirstN(Switch(sort,"ascending",SortByColumns(data,"value",SortOrder.Ascending),"descending",SortByColumns(data,"value",SortOrder.Descending),data),index))
                                        })
                                    }),"dataWithId",RenameColumns(data,"index","id")),
                                        Concat(Table({data:AddColumns(AddColumns(AddColumns(AddColumns(data,
                                            "percentage",Round(Switch(percentageStyle.mode,"last",d.value / If(index = 1,d.value,LookUp(dataWithId,id = index - 1).d.value),"max",d.value / max,d.value / sum) * 100,1) & "%",
                                            "connectorColor", If(IsBlank(connectorColor),d.color,connectorColor),
                                            "h1", Sqrt(height * height * Sum(Filter(dataWithId,id < index),d.value) / sum),
                                            "h2", Sqrt(height * height * Sum(Filter(dataWithId,id <= index),d.value) / sum),
                                            "pad", Round((width - maxWidth) / 2,3)
                                        ),
                                            "levelWidth", Round(If(mode="pyramid", h1 * width / height ,(d.value / max) * maxWidth),3),
                                            "nextLevelWidth", Round(If(mode = "pyramid", h2 * width / height ,(If(mode = "rectangle", d, Coalesce(LookUp(dataWithId,index + 1 = id).d,If(mode<>"pyramid",d))).value / max) * maxWidth),3),
                                            "levelHeight", Round(If(mode="pyramid",h2 - h1,barContainerHeight - itemGap),3)
                                        ),
                                            "x", Round(If(align = "start",pad,align="end",-levelWidth - pad,-levelWidth/2),3),
                                            "y", Round(If(mode="pyramid",h1,barContainerHeight * (index - 1)),3),
                                            "x2", Round(If(align = "start",pad,align="end",-nextLevelWidth - pad,-nextLevelWidth/2),3)
                                        ),
                                            "x1", Round(x + levelWidth,3),
                                            "y2", Round(y + levelHeight,3),
                                            "x3", Round(x2 + nextLevelWidth,3)
                                        )}),
                                            Concat(data,
                                                "<path data='" & d.value & "' " &
                                                    "d='M" & x & "," & y & 
                                                        "H" & x1 & "L" & x3 & "," & y2 &
                                                        "H" & x2 & "Z' " &
                                                    "fill='" & d.color & "' stroke-width='0' fill-rule='evenodd'></path>" &
                                                If(mode <> "pyramid","<path data='" & d.value & "' " &
                                                    "d='M" & x2 & "," & y2 & 
                                                        "H" & x3 & "L" & LookUp(RenameColumns(data,"index","id"),id = index + 1).x1 & "," & Round(y2 + itemGap,3) &
                                                        "H" & LookUp(RenameColumns(data,"index","id"),id = index + 1).x & "Z' " &
                                                    "fill='" & d.color & "' " &
                                                    "fill-opacity='" & connectorOpacity & "' stroke-width='0' fill-rule='evenodd'></path>") &
                                                If(orientation = "horizontal",
                                                    "<text class='data-label' transform='rotate(90," & Round((x + x1) / 2,3) & "," & Round((y+y2)/2,3) & ")' " &
                                                        "x='"& Round((x + x1) / 2,3) &"' "&
                                                        "y='" & Round((y+y2)/2,3) & "' "&
                                                        "dy='" & Round((labelStyle.fontSize - dataStyle.fontSize - percentageStyle.fontSize - dataStyle.dy - percentageStyle.dy)/2,3) & "' "&
                                                        "text-anchor='middle'>" &
                                                        If(labelStyle.enabled,d.label) &
                                                        If(dataStyle.enabled," <tspan class='value-label' " &
                                                            "x='"& Round((x + x1) / 2,3) &"' "&
                                                            "dy='"& Round(dataStyle.fontSize+dataStyle.dy,3) &"'>" &
                                                            Text(d.value, dataStyle.format) &
                                                        "</tspan>") &
                                                        If(percentageStyle.enabled," <tspan class='percentage-label' " &
                                                            "x='" & Round((x + x1) / 2,3) &"' "&
                                                            "dy='"& Round(percentageStyle.fontSize+percentageStyle.dy,3) &"'>" &
                                                            percentage &
                                                        "</tspan>") &
                                                    "</text>",
                                                    "<text class='data-label' " &
                                                        "x='"& Switch(labelStyle.align,"left",x + 5,"right",x1 - 5,Round((x + x1) / 2,3)) &"' "&
                                                        "y='" & Switch(labelStyle.verticalAlign,"top",y + 5,"bottom",y2 - 5,Round((y+y2)/2,3)) & "' "&
                                                        "text-anchor='" & Switch(labelStyle.align,"left","start","right","end","middle") & "' " &
                                                        "dy='" & Switch(labelStyle.verticalAlign,"top","0.8em","bottom","0","0.4em") & "'>" &
                                                        If(labelStyle.enabled,d.label) &
                                                        If(dataStyle.enabled," <tspan class='value-label' " &
                                                            "dx='"& dataStyle.dx &"' " &
                                                            "dy='"& dataStyle.dy &"'>" &
                                                            Text(d.value, dataStyle.format) &
                                                        "</tspan>") &
                                                        If(percentageStyle.enabled," <tspan class='percentage-label' " &
                                                            "dx='"& percentageStyle.dx &"' " &
                                                            "dy='"& percentageStyle.dy &"'>" &
                                                            percentage &
                                                        "</tspan>") &
                                                    "</text>"
                                                )
                                            )
                                    )) &
                                "</g>"
                            ))),
                        "</svg>"
                    ),
                    "%", "%25"), "<", "%3C"), ">", "%3E"), "#", "%23"), "{", "%7B"), "}", "%7D")
            ))
        PressedBorderColor: =ColorFade(Funnel.BorderColor, -20%)
        PressedFill: =ColorFade(Funnel.Fill, -20%)
        Width: =PlotArea.Width
        X: =PlotArea.X
        Y: =PlotArea.Y
        ZIndex: =3

    SolidGauge As image:
        FocusedBorderColor: =SolidGauge.BorderColor
        Height: =PlotArea.Height
        HoverBorderColor: =ColorFade(SolidGauge.BorderColor, 20%)
        HoverFill: =ColorFade(SolidGauge.Fill, 20%)
        Image: |-
            =If(Chart.Type = "Solid Gauge", Concat(
                Table({
                    width: PlotArea.Width,
                    height: PlotArea.Height,
                    colors:RenameColumns(Chart.Colors,"Value","color"),
                    indexes: ForAll(
                        ForAll(Split(
                            Concat(
                                Table({ 
                                    indexes: ForAll(
                                        ForAll(Split(Coalesce(LookUp(Parent.Options, key="indexes").value, "1,2,3,4,5,6,7,8,9,10"), ","), {Result: ThisRecord.Value}),
                                        Value(Result)
                                    )
                                }),
                                Concat(
                                    RenameColumns(indexes, "Value","baseIndex"), 
                                    Concat(indexes, Text((baseIndex - 1) * CountRows(indexes) + Value), ","),
                                    ","
                                )
                            ), ","), {Result: ThisRecord.Value}),
                        { index: Value(Result) }
                    ) //1, 2, 3, 4, ..., 99, 100
                }), 
                 Substitute(Substitute(Substitute(Substitute(Substitute(Substitute(
                    Concatenate(
                        "data:image/svg+xml;charset=utf8,", 
                        "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 " & width & " " & height & "'>",
                            Concat(Table({
                                yAxis:{
                                    labels:{
                                        enabled: LookUp(Chart.Options, key="y.labels").value <> "false",
                                        fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = "y.labels.fontSize").value,"12")),3),
                                        fontFamily: LookUp(Chart.Options, key = "y.labels.fontFamily").value,
                                        fontWeight: Coalesce(LookUp(Chart.Options, key="y.labels.fontWeight").value,"bold"),
                                        fontStyle: Coalesce(LookUp(Chart.Options, key="y.labels.fontStyle").value,"normal"),
                                        color: Coalesce(LookUp(Chart.Options, key="y.labels.color").value,"#333333"),
                                        additionalStyles: LookUp(Chart.Options, key="y.labels.additionalStyles").value
                                    }
                                },
                                xAxis:{
                                    labels:{
                                        fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = "x.labels.fontSize").value,"14")),3),
                                        fontFamily: LookUp(Chart.Options, key = "x.labels.fontFamily").value,
                                        fontWeight: Coalesce(LookUp(Chart.Options, key="x.labels.fontWeight").value,"bold"),
                                        fontStyle: Coalesce(LookUp(Chart.Options, key="x.labels.fontStyle").value,"normal"),
                                        color: LookUp(Chart.Options, key="x.labels.color").value,
                                        additionalStyles: LookUp(Chart.Options, key="x.labels.additionalStyles").value
                                    }
                                },
                                itemGap:Round(Value(Coalesce(LookUp(Chart.Options, key = "solidGauge.itemGap").value,"5")),3),
                                minRadius:Round(Value(Coalesce(LookUp(Chart.Options, key = "solidGauge.minRadius").value,"0.3")),3),
                                labels:Chart.Data.labels,
                                values:LookUp(Chart.Data.table, key="values", values)
                            }),
                                Concat(Table({
                                    data:ForAll(FirstN(indexes,CountRows(labels)),{
                                        index:index,
                                        color:Last(FirstN(colors,index)).color,
                                        label:Last(FirstN(labels,index)).Value,
                                        value:If(CountRows(values) < index, 0, Last(FirstN(values,index)).Value)
                                    }),
                                    xSpaces:CountRows(labels),
                                    maxRadius:Round(If(yAxis.labels.enabled,Min(width - yAxis.labels.fontSize * 8, height - yAxis.labels.fontSize * 5),Min(width,height)) / 2,3)
                                }),
                                    Concat(Table({
                                        minRadius:Round(maxRadius * minRadius,3),
                                        barWidth:Round(maxRadius * (1 - minRadius) / xSpaces - itemGap,3),
                                        offset:Round((maxRadius * (1 - minRadius) / xSpaces),3),
                                        centerX:Round(width/2,3),
                                        centerY:Round(height/2,3),
                                        data:AddColumns(data,
                                            "angle", Round(value / 100.0 * 270,3)
                                        )
                                    }),
                                        //Y Axis
                                        If(yAxis.labels.enabled,
                                        "<style>" &
                                            ".y-labels{fill:"& yAxis.labels.color &";font-size:" & yAxis.labels.fontSize & "px;font-family:'" & yAxis.labels.fontFamily & "';font-weight:" & yAxis.labels.fontWeight & ";font-style:" & yAxis.labels.fontStyle & ";" & yAxis.labels.additionalStyles & "}"&
                                        "</style>" &
                                        Concat(AddColumns(AddColumns(FirstN(indexes,11),
                                            "value",Round((index - 1) * 10,0),
                                            "label",Round((index - 1) * 10,0) & "%",
                                            "angle",Round((index - 1) / 10.0 * 270,3),
                                            "r",Round(maxRadius + yAxis.labels.fontSize * 2,3)
                                        ),
                                            "x", Round(centerX + Cos(Radians(angle - 90)) * r,3),
                                            "y", Round(centerY + Sin(Radians(angle - 90)) * r,3)
                                        ),
                                            "<text class='y-labels' dy='.4em' " &
                                                "x='"&x&"' "&
                                                "y='"&y&"' "&
                                                "text-anchor='middle'>"&
                                                label &
                                            "</text>"
                                        )) &
                                        "<style>" &
                                            ".x-labels{font-size:" & xAxis.labels.fontSize & "px;font-family:'" & xAxis.labels.fontFamily & "';font-weight:" & xAxis.labels.fontWeight & ";font-style:" & xAxis.labels.fontStyle & ";" & xAxis.labels.additionalStyles & "}"&
                                        "</style>" &
                                        Concat(AddColumns(AddColumns(data,
                                            "r", Round(maxRadius - (index - 0.5) * offset, 3),
                                            "large", If(angle >= 180,1,0)
                                        ),
                                            "x", Round(centerX + Cos(Radians(angle - 90)) * r,3),
                                            "y", Round(centerY + Sin(Radians(angle - 90)) * r,3)
                                        ),
                                        "<g>" &
                                            "<text class='x-labels' dy='.4em' " &
                                                "dx='"&Round(-barWidth / 2 - 10,3)&"' " &
                                                "fill='"&If(IsBlank(xAxis.labels.color),color,xAxis.labels.color)&"' " &
                                                "x='"&centerX&"' " &
                                                "y='"&Round(centerY - r,3)&"' " &
                                                "text-anchor='end'>" & 
                                                label &
                                            "</text>" &
                                            "<path fill='none' "&
                                                "stroke-opacity='0.08' " &
                                                "stroke-linecap='round' " &
                                                "stroke='#000000' "&
                                                "stroke-width='"& barWidth &"' "&
                                                "d='M"&centerX&","&Round(centerY - r,3)&
                                                    "A"&r&","&r&",270,1,1,"&Round(centerX - r,3)&","&centerY&"'/>" &
                                            "<path fill='none' "&
                                                "stroke-linecap='round' " &
                                                "stroke='"&color&"' "&
                                                "stroke-width='"& barWidth &"' "&
                                                "d='M"&centerX&","&Round(centerY - r,3)&
                                                    "A"&r&","&r&","&angle&","&large&",1,"&x&","&y&"'/>" &
                                        "</g>"
                                        )
                                    )
                                )
                            ),
                        "</svg>"
                    ),
                    "%", "%25"), "<", "%3C"), ">", "%3E"), "#", "%23"), "{", "%7B"), "}", "%7D")
            ))
        PressedBorderColor: =ColorFade(SolidGauge.BorderColor, -20%)
        PressedFill: =ColorFade(SolidGauge.Fill, -20%)
        Width: =PlotArea.Width
        X: =PlotArea.X
        Y: =PlotArea.Y
        ZIndex: =4

    Candle As image:
        FocusedBorderColor: =Candle.BorderColor
        Height: =PlotArea.Height
        HoverBorderColor: =ColorFade(Candle.BorderColor, 20%)
        HoverFill: =ColorFade(Candle.Fill, 20%)
        Image: |-
            =If(Chart.Type = "Candle", Concat(
                Table({
                    width: PlotArea.Width,
                    height: PlotArea.Height,
                    colors:RenameColumns(Chart.Colors,"Value","color"),
                    indexes: ForAll(
                        ForAll(Split(
                            Concat(
                                Table({ 
                                    indexes: ForAll(
                                        ForAll(Split(Coalesce(LookUp(Parent.Options, key="indexes").value, "1,2,3,4,5,6,7,8,9,10"), ","), {Result: ThisRecord.Value}),
                                        Value(Result)
                                    )
                                }),
                                Concat(
                                    RenameColumns(indexes, "Value","baseIndex"), 
                                    Concat(indexes, Text((baseIndex - 1) * CountRows(indexes) + Value), ","),
                                    ","
                                )
                            ), ","), {Result: ThisRecord.Value}),
                        { index: Value(Result) }
                    ) //1, 2, 3, 4, ..., 99, 100
                }), 
                 Substitute(Substitute(Substitute(Substitute(Substitute(Substitute(
                    Concatenate(
                        "data:image/svg+xml;charset=utf8,", 
                        "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 " & width & " " & height & "'>",
                            Concat(Table({
                                xAxis:{
                                    enabled: LookUp(Chart.Options, key="x").value <> "false",
                                    title: LookUp(Chart.Options, key="x.title").value,
                                    titleStyle: {
                                        y:Round(Value(Coalesce(LookUp(Chart.Options, key = "x.title.y").value,"-10")),3),
                                        align:If(LookUp(Chart.Options, key="x.title.align").value = "left","left","right"),
                                        fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = "x.title.fontSize").value,"14")),3),
                                        fontFamily: LookUp(Chart.Options, key = "x.title.fontFamily").value,
                                        fontWeight: Coalesce(LookUp(Chart.Options, key="x.title.fontWeight").value,"bold"),
                                        fontStyle: Coalesce(LookUp(Chart.Options, key="x.title.fontStyle").value,"normal"),
                                        color: Coalesce(LookUp(Chart.Options, key="x.title.color").value,"#333333"),
                                        additionalStyles: LookUp(Chart.Options, key="x.title.additionalStyles").value
                                    },
                                    style: {
                                        height: Round(Value(Coalesce(LookUp(Chart.Options, key = "x.height").value,"50")),3),
                                        lineWidth: Round(Value(Coalesce(LookUp(Chart.Options, key = "x.lineWidth").value,"1")),3),
                                        lineColor: Coalesce(LookUp(Chart.Options, key = "x.lineColor").value,"#333333"),
                                        tickLength: Round(Value(Coalesce(LookUp(Chart.Options, key = "x.tickLength").value,"5")),3),
                                        tickWidth: Round(Value(Coalesce(LookUp(Chart.Options, key = "x.tickWidth").value,"1")),3)
                                    },
                                    labels: {
                                        enabled: LookUp(Chart.Options, key="x.labels").value <> "false",
                                        format: LookUp(Chart.Options, key = "x.labels.format").value,
                                        rotation: Round(Value(Coalesce(LookUp(Chart.Options, key = "x.labels.rotation").value,"-40")),3),
                                        fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = "x.labels.fontSize").value,"12")),3),
                                        fontFamily: LookUp(Chart.Options, key = "x.labels.fontFamily").value,
                                        fontWeight: Coalesce(LookUp(Chart.Options, key="x.labels.fontWeight").value,"bold"),
                                        fontStyle: Coalesce(LookUp(Chart.Options, key="x.labels.fontStyle").value,"normal"),
                                        color: Coalesce(LookUp(Chart.Options, key="x.labels.color").value,"#333333"),
                                        additionalStyles: LookUp(Chart.Options, key="x.labels.additionalStyles").value
                                    }
                                },
                                yAxis:{
                                    enabled: LookUp(Chart.Options, key="y").value <> "false",
                                    title: LookUp(Chart.Options, key="y.title").value,
                                    titleStyle: {
                                        align:If(LookUp(Chart.Options, key="y.title.align").value = "left","left","right"),
                                        fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = "y.title.fontSize").value,"14")),3),
                                        fontFamily: LookUp(Chart.Options, key = "y.title.fontFamily").value,
                                        fontWeight: Coalesce(LookUp(Chart.Options, key="y.title.fontWeight").value,"bold"),
                                        fontStyle: Coalesce(LookUp(Chart.Options, key="y.title.fontStyle").value,"normal"),
                                        color: Coalesce(LookUp(Chart.Options, key="y.title.color").value,"#333333"),
                                        additionalStyles: LookUp(Chart.Options, key="y.title.additionalStyles").value
                                    },
                                    align:Coalesce(LookUp(Chart.Options, key="y.align").value,"left"),
                                    step:Round(Value(LookUp(Chart.Options, key = "y.step").value),3),
                                    min:Round(Value(LookUp(Chart.Options, key = "y.min").value),3),
                                    max:Round(Value(LookUp(Chart.Options, key = "y.max").value),3),
                                    style: {
                                        width: Round(Value(Coalesce(LookUp(Chart.Options, key = "y.width").value,"50")),3),
                                        lineWidth: Round(Value(Coalesce(LookUp(Chart.Options, key = "y.lineWidth").value,"1")),3),
                                        lineColor: Coalesce(LookUp(Chart.Options, key = "y.lineColor").value,"#333333"),
                                        tickLength: Round(Value(Coalesce(LookUp(Chart.Options, key = "y.tickLength").value,"5")),3),
                                        tickWidth: Round(Value(Coalesce(LookUp(Chart.Options, key = "y.tickWidth").value,"1")),3),
                                        padTop:Round(Value(Coalesce(LookUp(Chart.Options, key = "y.padTop").value,"20")),3)
                                    },
                                    labels: {
                                        enabled: LookUp(Chart.Options, key="y.labels").value <> "false",
                                        format: Coalesce(LookUp(Chart.Options, key = "y.labels.format").value,"0"),
                                        fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = "y.labels.fontSize").value,"12")),3),
                                        fontFamily: LookUp(Chart.Options, key = "y.labels.fontFamily").value,
                                        fontWeight: Coalesce(LookUp(Chart.Options, key="y.labels.fontWeight").value,"bold"),
                                        fontStyle: Coalesce(LookUp(Chart.Options, key="y.labels.fontStyle").value,"normal"),
                                        color: Coalesce(LookUp(Chart.Options, key="y.labels.color").value,"#333333"),
                                        additionalStyles: LookUp(Chart.Options, key="y.labels.additionalStyles").value
                                    }
                                },
                                style:{
                                    downColor:Coalesce(LookUp(Chart.Options, key = "candle.downColor").value,"#00da3c"),
                                    upColor:Coalesce(LookUp(Chart.Options, key = "candle.upColor").value,"#ec0000"),
                                    downBorderColor:Coalesce(LookUp(Chart.Options, key = "candle.downBorderColor").value,"#008f28"),
                                    upBorderColor:Coalesce(LookUp(Chart.Options, key = "candle.upBorderColor").value,"#8a0000"),
                                    itemGap:Round(Value(Coalesce(LookUp(Chart.Options, key = "candle.itemGap").value,"5")),3),
                                    fillOpacity:Round(Value(Coalesce(LookUp(Chart.Options, key = "candle.fillOpacity").value,"1")),3),
                                    borderWidth:Round(Value(Coalesce(LookUp(Chart.Options, key = "candle.borderWidth").value,"1")),3)
                                },
                                labels:Chart.Data.labels,
                                open:ForAll(LookUp(Chart.Data.table, key="open").values,{Value:Round(Value(Value),3)}),
                                close:ForAll(LookUp(Chart.Data.table, key="close").values,{Value:Round(Value(Value),3)}),
                                lowest:ForAll(LookUp(Chart.Data.table, key="lowest").values,{Value:Round(Value(Value),3)}),
                                highest:ForAll(LookUp(Chart.Data.table, key="highest").values,{Value:Round(Value(Value),3)})
                            }),
                                Concat(Table({
                                    data:ForAll(Filter(indexes,index<=CountRows(labels)),{
                                        id:index,
                                        open:If(CountRows(open) < index, 0, Last(FirstN(open,index)).Value),
                                        close:If(CountRows(close) < index, 0, Last(FirstN(close,index)).Value),
                                        lowest:If(CountRows(lowest) < index, 0, Last(FirstN(lowest,index)).Value),
                                        highest:If(CountRows(highest) < index, 0, Last(FirstN(highest,index)).Value)
                                    }),
                                    plot:{
                                        x:If(yAxis.enabled && yAxis.align = "left",yAxis.style.width,0),
                                        y:If(yAxis.enabled, yAxis.style.padTop, 0),
                                        width:If(yAxis.enabled, Round(width - yAxis.style.width,3), width),
                                        height:Round(height - If(xAxis.enabled,xAxis.style.height,0) - If(yAxis.enabled,yAxis.style.padTop,0),3)
                                    },
                                    xSpaces:CountRows(labels) + 1
                                }),
                                    Concat(AddColumns(AddColumns(Table({
                                        barWidth:Round(plot.width / xSpaces - style.itemGap,3),
                                        xSpaceWidth:Round((plot.width / xSpaces),3),
                                        labels:ForAll(FirstN(indexes,CountRows(labels)),{
                                            x:Round(index * (plot.width / xSpaces),3),
                                            labelText:Last(FirstN(labels,index)).Value
                                        }),
                                        data:AddColumns(data,
                                            "up", close >= open
                                        ),
                                        minTemp:If(yAxis.max <> yAxis.min,yAxis.min,Min(data,lowest)),
                                        max:If(yAxis.max <> yAxis.min,yAxis.max,Max(data,highest)),
                                        tickX:Round(If(yAxis.align = "left", -yAxis.style.tickLength, yAxis.style.tickLength),3),
                                        labelX:Round(If(yAxis.align = "left",-yAxis.style.tickLength-5,yAxis.style.tickLength + 5),3),
                                        labelAnchor:If(yAxis.align = "left","end","start")
                                    }), "min", If(minTemp>=0 && (max - minTemp) / 10 > minTemp,0,RoundDown(minTemp - (max - minTemp) / 10,0))),
                                        "step", If(yAxis.step = 0,RoundUp((max - min) / 5,0),yAxis.step),
                                        "ratio", plot.height / (min - max),
                                        "halfBarWidth", Round(barWidth / 2,3)),
                                    //X Axis
                                    "<style>" &
                                        ".x-labels{fill:"& xAxis.labels.color &";font-size:" & xAxis.labels.fontSize & "px;font-family:'" & xAxis.labels.fontFamily & "';font-weight:" & xAxis.labels.fontWeight & ";font-style:" & xAxis.labels.fontStyle & ";" & xAxis.labels.additionalStyles & "}"&
                                        ".y-labels{fill:"& yAxis.labels.color &";font-size:" & yAxis.labels.fontSize & "px;font-family:'" & yAxis.labels.fontFamily & "';font-weight:" & yAxis.labels.fontWeight & ";font-style:" & yAxis.labels.fontStyle & ";" & yAxis.labels.additionalStyles & "}"&
                                    "</style>" &
                                    If(xAxis.enabled,"<g class='x-axis' transform='translate(" & plot.x & "," & Round(plot.y + plot.height,3) & ")'>" &
                                        "<path d='M0,0H" & Round(plot.x + plot.width,3) & "'  "&
                                            "fill='none' " & 
                                            "stroke-width='" & xAxis.style.lineWidth & "' " &
                                            "stroke='" & xAxis.style.lineColor & "'/>" &
                                        If(!IsBlank(xAxis.title), "<text dy='0.35em' " &
                                            "text-anchor='" & If(xAxis.titleStyle.align = "left","start","end") & "' " &
                                            "x='" & If(xAxis.titleStyle.align="left",10,Round(width - yAxis.style.width - 10,3)) & "' " &
                                            "y='" & xAxis.titleStyle.y & "' " &
                                            "style='" &
                                                "fill:" & xAxis.titleStyle.color & ";" &
                                                "font-size:" & xAxis.titleStyle.fontSize & "px;" &
                                                "font-family:" & xAxis.titleStyle.fontFamily & ";" &
                                                "font-weight:" & xAxis.titleStyle.fontWeight & ";" &
                                                "font-style:" & xAxis.titleStyle.fontStyle & ";" & xAxis.titleStyle.additionalStyles & "'>" &
                                            xAxis.title &
                                        "</text>") &
                                        "<g>" &
                                            Concat(labels,
                                            "<g transform='translate(" & x & ",0)'>" &
                                                "<path d='M0,0V" & xAxis.style.tickLength & "' stroke-width='" & xAxis.style.tickWidth & "' stroke='" & xAxis.style.lineColor & "'/>" &
                                                If(xAxis.labels.enabled, "<text transform='rotate(" & xAxis.labels.rotation & ",0,5)' class='x-labels' dy='1em' y='5' text-anchor='"& If(xAxis.labels.rotation > 0,"start",xAxis.labels.rotation < 0,"end", "middle") & "' x='0'>" &
                                                    labelText &
                                                "</text>") &
                                            "</g>") &
                                        "</g>" &
                                    "</g>") &
                                    //Y Axis
                                    If(yAxis.enabled,"<g class='y-axis' transform='translate(" & If(yAxis.align = "left",0,Round(width - yAxis.style.width,3)) & ",0)'>" &
                                        If(!IsBlank(yAxis.title), "<text dy='.5em' " &
                                            "text-anchor='" & If(yAxis.titleStyle.align = "left","end","start") & "' " &
                                            "x='" & Round(If(yAxis.align="left",yAxis.style.width,0) + If(yAxis.titleStyle.align = "left",-10,10),3) & "' " &
                                            "y='0' " &
                                            "style='" &
                                                "fill:" & yAxis.titleStyle.color & ";" &
                                                "font-size:" & yAxis.titleStyle.fontSize & "px;" &
                                                "font-family:" & yAxis.titleStyle.fontFamily & ";" &
                                                "font-weight:" & yAxis.titleStyle.fontWeight & ";" &
                                                "font-style:" & yAxis.titleStyle.fontStyle & ";" & yAxis.titleStyle.additionalStyles & "'>" &
                                            yAxis.title &
                                        "</text>") &
                                        "<path transform='translate(" & Round(If(yAxis.align = "left", yAxis.style.width, 0),3) & ",0)' d='M0,0L3,10L-3,10L0,0V" & Round(plot.y + plot.height,3) & "'  "&
                                            "fill='" & yAxis.style.lineColor & "' " & 
                                            "stroke-width='" & yAxis.style.lineWidth & "' " &
                                            "stroke='" & yAxis.style.lineColor & "'/>" &
                                        "<g>" &
                                            "<g transform='translate(" & If(yAxis.align = "left", yAxis.style.width, 0) & "," & Round(plot.y + plot.height,3) & ")'>" &
                                                "<path d='M0,0H" & tickX & "' stroke-width='" & xAxis.style.tickWidth & "' stroke='" & yAxis.style.lineColor & "'/>" &
                                                If(yAxis.labels.enabled,
                                                "<text class='y-labels' dy='.5em' y='-5' text-anchor='"& labelAnchor & "' x='"& labelX & "'>" &
                                                    Text(min, yAxis.labels.format) &
                                                "</text>") &
                                            "</g>" &
                                            Concat(ForAll(Filter(indexes, index <= RoundUp((max - min) / step,0)),{
                                                y:Round(plot.y + (plot.height) * (1 - step * index / (max - min)),3),
                                                label:Text(min + index * step, yAxis.labels.format)
                                            }),
                                            "<g transform='translate(" & If(yAxis.align = "left", yAxis.style.width, 0) & "," & y & ")'>" &
                                                "<path d='M0,0H" & tickX & "' stroke-width='" & yAxis.style.tickWidth & "' stroke='" & yAxis.style.lineColor & "'/>" &
                                                If(yAxis.labels.enabled,
                                                "<text class='y-labels' dy='.5em' y='-5' text-anchor='"& labelAnchor & "' x='"& labelX & "'>" &
                                                    label &
                                                "</text>") &
                                            "</g>") &
                                        "</g>" &
                                    "</g>") &
                                    "<g transform='translate("&plot.x&","&Round(plot.y+plot.height,3)&")'>" &
                                        Concat(AddColumns(data,
                                            "x",Round(id * xSpaceWidth,3),
                                            "fill", If(up,style.upColor,style.downColor),
                                            "stroke", If(up,style.upBorderColor,style.downBorderColor),
                                            "y1", Round(ratio * (highest - min), 3),
                                            "y2", Round(ratio * (If(up, close, open) - min), 3),
                                            "y3", Round(ratio * (If(up, open, close) - min), 3),
                                            "y4", Round(ratio * (lowest - min), 3)
                                        ),
                                            "<g class='bar' transform='translate(" & Round(x-halfBarWidth,3) & ",0)' " &
                                                    "fill='" & fill & "' " & 
                                                    "fill-opacity='" & style.fillOpacity & "' " &
                                                    "stroke='" & stroke & "' " &
                                                    "stroke-width='" & style.borderWidth & "'>" &
                                                "<path d='M" & halfBarWidth & "," & y1 & "V" & y2 & "H0V" & y3 & "H" & barWidth & "V" & y2 & "H" & halfBarWidth & "M" & halfBarWidth & "," & y3 & "V" & y4 & "' " &
                                                    "fill='" & fill & "' />" &
                                            "</g>"
                                        ) &
                                    "</g>"
                                    )
                                )
                            ),
                        "</svg>"
                    ),
                    "%", "%25"), "<", "%3C"), ">", "%3E"), "#", "%23"), "{", "%7B"), "}", "%7D")
            ))
        PressedBorderColor: =ColorFade(Candle.BorderColor, -20%)
        PressedFill: =ColorFade(Candle.Fill, -20%)
        Width: =PlotArea.Width
        X: =PlotArea.X
        Y: =PlotArea.Y
        ZIndex: =5

    Scatter As image:
        FocusedBorderColor: =Scatter.BorderColor
        Height: =PlotArea.Height
        HoverBorderColor: =ColorFade(Scatter.BorderColor, 20%)
        HoverFill: =ColorFade(Scatter.Fill, 20%)
        Image: |-
            =If(Chart.Type = "Scatter", Concat(
                Table({
                    width: PlotArea.Width,
                    height: PlotArea.Height,
                    colors:RenameColumns(Chart.Colors,"Value","color"),
                    indexes: ForAll(
                        ForAll(Split(
                            Concat(
                                Table({ 
                                    indexes: ForAll(
                                        ForAll(Split(Coalesce(LookUp(Parent.Options, key="indexes").value, "1,2,3,4,5,6,7,8,9,10"), ","), {Result: ThisRecord.Value}),
                                        Value(Result)
                                    )
                                }),
                                Concat(
                                    RenameColumns(indexes, "Value","baseIndex"), 
                                    Concat(indexes, Text((baseIndex - 1) * CountRows(indexes) + Value), ","),
                                    ","
                                )
                            ), ","), {Result: ThisRecord.Value}),
                        { index: Value(Result) }
                    ) //1, 2, 3, 4, ..., 99, 100
                }), 
                 Substitute(Substitute(Substitute(Substitute(Substitute(Substitute(
                    Concatenate(
                        "data:image/svg+xml;charset=utf8,", 
                        "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 " & width & " " & height & "'>",
                            Concat(Table({
                                xAxis:{
                                    enabled: LookUp(Chart.Options, key="x").value <> "false",
                                    title: LookUp(Chart.Options, key="x.title").value,
                                    titleStyle: {
                                        y:Round(Value(Coalesce(LookUp(Chart.Options, key = "x.title.y").value,"-10")),3),
                                        align:If(LookUp(Chart.Options, key="x.title.align").value = "left","left","right"),
                                        fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = "x.title.fontSize").value,"14")),3),
                                        fontFamily: LookUp(Chart.Options, key = "x.title.fontFamily").value,
                                        fontWeight: Coalesce(LookUp(Chart.Options, key="x.title.fontWeight").value,"bold"),
                                        fontStyle: Coalesce(LookUp(Chart.Options, key="x.title.fontStyle").value,"normal"),
                                        color: Coalesce(LookUp(Chart.Options, key="x.title.color").value,"#333333"),
                                        additionalStyles: LookUp(Chart.Options, key="x.title.additionalStyles").value
                                    },
                                    step:Round(Value(LookUp(Chart.Options, key = "x.step").value),3),
                                    min:Round(Value(LookUp(Chart.Options, key = "x.min").value),3),
                                    max:Round(Value(LookUp(Chart.Options, key = "x.max").value),3),
                                    style: {
                                        height: Round(Value(Coalesce(LookUp(Chart.Options, key = "x.height").value,"20")),3),
                                        lineWidth: Round(Value(Coalesce(LookUp(Chart.Options, key = "x.lineWidth").value,"1")),3),
                                        lineColor: Coalesce(LookUp(Chart.Options, key = "x.lineColor").value,"#333333"),
                                        tickLength: Round(Value(Coalesce(LookUp(Chart.Options, key = "x.tickLength").value,"5")),3),
                                        tickWidth: Round(Value(Coalesce(LookUp(Chart.Options, key = "x.tickWidth").value,"1")),3),
                                        padRight:Round(Value(Coalesce(LookUp(Chart.Options, key = "y.padRight").value,"40")),3)
                                    },
                                    labels: {
                                        enabled: LookUp(Chart.Options, key="x.labels").value <> "false",
                                        format: Coalesce(LookUp(Chart.Options, key = "x.labels.format").value,"0"),
                                        rotation: Round(Value(LookUp(Chart.Options, key = "x.labels.rotation").value),3),
                                        fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = "x.labels.fontSize").value,"12")),3),
                                        fontFamily: LookUp(Chart.Options, key = "x.labels.fontFamily").value,
                                        fontWeight: Coalesce(LookUp(Chart.Options, key="x.labels.fontWeight").value,"bold"),
                                        fontStyle: Coalesce(LookUp(Chart.Options, key="x.labels.fontStyle").value,"normal"),
                                        color: Coalesce(LookUp(Chart.Options, key="x.labels.color").value,"#333333"),
                                        additionalStyles: LookUp(Chart.Options, key="x.labels.additionalStyles").value
                                    }
                                },
                                yAxis:{
                                    enabled: LookUp(Chart.Options, key="y").value <> "false",
                                    title: LookUp(Chart.Options, key="y.title").value,
                                    titleStyle: {
                                        align:If(LookUp(Chart.Options, key="y.title.align").value = "left","left","right"),
                                        fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = "y.title.fontSize").value,"14")),3),
                                        fontFamily: LookUp(Chart.Options, key = "y.title.fontFamily").value,
                                        fontWeight: Coalesce(LookUp(Chart.Options, key="y.title.fontWeight").value,"bold"),
                                        fontStyle: Coalesce(LookUp(Chart.Options, key="y.title.fontStyle").value,"normal"),
                                        color: Coalesce(LookUp(Chart.Options, key="y.title.color").value,"#333333"),
                                        additionalStyles: LookUp(Chart.Options, key="y.title.additionalStyles").value
                                    },
                                    align:Coalesce(LookUp(Chart.Options, key="y.align").value,"left"),
                                    step:Round(Value(LookUp(Chart.Options, key = "y.step").value),3),
                                    min:Round(Value(LookUp(Chart.Options, key = "y.min").value),3),
                                    max:Round(Value(LookUp(Chart.Options, key = "y.max").value),3),
                                    style: {
                                        width: Round(Value(Coalesce(LookUp(Chart.Options, key = "y.width").value,"50")),3),
                                        lineWidth: Round(Value(Coalesce(LookUp(Chart.Options, key = "y.lineWidth").value,"1")),3),
                                        lineColor: Coalesce(LookUp(Chart.Options, key = "y.lineColor").value,"#333333"),
                                        tickLength: Round(Value(Coalesce(LookUp(Chart.Options, key = "y.tickLength").value,"5")),3),
                                        tickWidth: Round(Value(Coalesce(LookUp(Chart.Options, key = "y.tickWidth").value,"1")),3),
                                        padTop:Round(Value(Coalesce(LookUp(Chart.Options, key = "y.padTop").value,"20")),3)
                                    },
                                    labels: {
                                        enabled: LookUp(Chart.Options, key="y.labels").value <> "false",
                                        format: Coalesce(LookUp(Chart.Options, key = "y.labels.format").value,"0"),
                                        fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = "y.labels.fontSize").value,"12")),3),
                                        fontFamily: LookUp(Chart.Options, key = "y.labels.fontFamily").value,
                                        fontWeight: Coalesce(LookUp(Chart.Options, key="y.labels.fontWeight").value,"bold"),
                                        fontStyle: Coalesce(LookUp(Chart.Options, key="y.labels.fontStyle").value,"normal"),
                                        color: Coalesce(LookUp(Chart.Options, key="y.labels.color").value,"#333333"),
                                        additionalStyles: LookUp(Chart.Options, key="y.labels.additionalStyles").value
                                    }
                                },
                                style:{
                                    maxSize:Round(Value(Coalesce(LookUp(Chart.Options, key = "scatter.maxSize").value,"20")),3),
                                    minSize:Round(Value(Coalesce(LookUp(Chart.Options, key = "scatter.minSize").value,"10")),3),
                                    fillOpacity:Round(Value(Coalesce(LookUp(Chart.Options, key = "scatter.fillOpacity").value,"1")),3),
                                    borderWidth:Round(Value(LookUp(Chart.Options, key = "scatter.borderWidth").value),3),
                                    borderColor:LookUp(Chart.Options, key = "scatter.borderColor").value
                                },
                                legends:If(Chart.Legend.source = "labels", Chart.Data.labels, Chart.Data.legends)
                            }),
                                Concat(Table({
                                    data:ForAll(FirstN(indexes,CountRows(legends)),{
                                        index:index,
                                        color:Last(FirstN(colors,index)).color,
                                        xValues:ForAll(LookUp(Chart.Data.table, key=index & ".x").values,{Value:Round(Value(Value),3)}),
                                        yValues:ForAll(LookUp(Chart.Data.table, key=index & ".y").values,{Value:Round(Value(Value),3)}),
                                        zValues:ForAll(LookUp(Chart.Data.table, key=index & ".z").values,{Value:Round(Value(Value),3)})
                                    }),
                                    plot:{
                                        x:If(yAxis.enabled && yAxis.align = "left",yAxis.style.width,0),
                                        y:If(yAxis.enabled, yAxis.style.padTop, 0),
                                        width:Round(width - If(yAxis.enabled,yAxis.style.width) - If(xAxis.enabled,xAxis.style.padRight,0),3),
                                        height:Round(height - If(xAxis.enabled,xAxis.style.height,0) - If(yAxis.enabled,yAxis.style.padTop,0),3)
                                    }
                                }),
                                    Concat(AddColumns(Table({
                                        data:ForAll(data,{
                                            id:index,
                                            color:color,
                                            values:ForAll(FirstN(indexes,CountRows(xValues)),{
                                                x:If(CountRows(xValues) < index, 0, Last(FirstN(xValues,index)).Value),
                                                y:If(CountRows(yValues) < index, 0, Last(FirstN(yValues,index)).Value),
                                                z:If(CountRows(zValues) < index, 0, Last(FirstN(zValues,index)).Value)
                                            })
                                        }),
                                        minX:If(xAxis.max <> xAxis.min,xAxis.min,RoundDown(Min(data,Min(xValues,Value)) - (Max(data,Max(xValues,Value)) - Min(data,Min(xValues,Value))) / 10,0)),
                                        maxX:If(xAxis.max <> xAxis.min,xAxis.max,RoundUp(Max(data,Max(xValues,Value)) + (Max(data,Max(xValues,Value)) - Min(data,Min(xValues,Value))) / 10,0)),
                                        minY:If(yAxis.max <> yAxis.min,yAxis.min,RoundDown(Min(data,Min(yValues,Value)) - (Max(data,Max(yValues,Value)) - Min(data,Min(yValues,Value))) / 10,0)),
                                        maxY:If(yAxis.max <> yAxis.min,yAxis.max,RoundUp(Max(data,Max(yValues,Value)),0)),
                                        minZ:RoundDown(Min(data,Min(zValues,Value)) - (Max(data,Max(zValues,Value)) - Min(data,Min(zValues,Value))) / 10,0),
                                        maxZ:RoundUp(Max(data,Max(zValues,Value)),0),
                                        tickX:Round(If(yAxis.align = "left", -yAxis.style.tickLength, yAxis.style.tickLength),3),
                                        labelX:Round(If(yAxis.align = "left",-yAxis.style.tickLength-5,yAxis.style.tickLength + 5),3),
                                        labelAnchor:If(yAxis.align = "left","end","start")
                                    }),"stepX",If(xAxis.step = 0,RoundUp((maxX - minX) / 5,0),xAxis.step)
                                       ,"stepY",If(yAxis.step = 0,RoundUp((maxY - minY) / 5,0),yAxis.step)),
                                    //X Axis
                                    "<style>" &
                                        ".x-labels{fill:"& xAxis.labels.color &";font-size:" & xAxis.labels.fontSize & "px;font-family:'" & xAxis.labels.fontFamily & "';font-weight:" & xAxis.labels.fontWeight & ";font-style:" & xAxis.labels.fontStyle & ";" & xAxis.labels.additionalStyles & "}"&
                                        ".y-labels{fill:"& yAxis.labels.color &";font-size:" & yAxis.labels.fontSize & "px;font-family:'" & yAxis.labels.fontFamily & "';font-weight:" & yAxis.labels.fontWeight & ";font-style:" & yAxis.labels.fontStyle & ";" & yAxis.labels.additionalStyles & "}"&
                                    "</style>" &
                                    If(xAxis.enabled,"<g class='x-axis' transform='translate(" & plot.x & "," & Round(plot.y + plot.height,3) & ")'>" &
                                        "<path d='M0,0H" & plot.width + xAxis.style.padRight & "'  "&
                                            "fill='none' " & 
                                            "stroke-width='" & xAxis.style.lineWidth & "' " &
                                            "stroke='" & xAxis.style.lineColor & "'/>" &
                                        If(!IsBlank(xAxis.title), "<text dy='0.35em' " &
                                            "text-anchor='" & If(xAxis.titleStyle.align = "left","start","end") & "' " &
                                            "x='" & If(xAxis.titleStyle.align="left",10,Round(width - yAxis.style.width - 10,3)) & "' " &
                                            "y='" & xAxis.titleStyle.y & "' " &
                                            "style='" &
                                                "fill:" & xAxis.titleStyle.color & ";" &
                                                "font-size:" & xAxis.titleStyle.fontSize & "px;" &
                                                "font-family:" & xAxis.titleStyle.fontFamily & ";" &
                                                "font-weight:" & xAxis.titleStyle.fontWeight & ";" &
                                                "font-style:" & xAxis.titleStyle.fontStyle & ";" & xAxis.titleStyle.additionalStyles & "'>" &
                                            xAxis.title &
                                        "</text>") &
                                        If(xAxis.labels.enabled,
                                        "<g>" &
                                            "<g>" &
                                                "<path d='M0,0V" & xAxis.style.tickLength & "' stroke-width='" & xAxis.style.tickWidth & "' stroke='" & yAxis.style.lineColor & "'/>" &
                                                "<text class='x-labels' dy='0.8em' y='" & xAxis.style.tickLength & "' x='0' " &
                                                    "transform='rotate(" & xAxis.labels.rotation & ",0,5)' " &
                                                    "text-anchor='" & If(xAxis.labels.rotation > 0, "start", xAxis.labels.rotation < 0, "end", "middle") & "'>" &
                                                    Text(minX,xAxis.labels.format) &
                                                "</text>" &
                                            "</g>" &
                                            Concat(ForAll(Filter(indexes, index <= RoundUp((maxX - minX) / stepX,0)),{
                                                x:Round(plot.width * ((stepX * index) / (maxX - minX)),3),
                                                label:Text(minX + index * stepX, xAxis.labels.format)
                                            }),
                                            "<g transform='translate(" & x & ",0)'>" &
                                                "<path d='M0,0V" & xAxis.style.tickLength & "' stroke-width='" & xAxis.style.tickWidth & "' stroke='" & yAxis.style.lineColor & "'/>" &
                                                "<text class='x-labels' dy='0.8em' y='" & xAxis.style.tickLength & "' x='0' " &
                                                    "transform='rotate(" & xAxis.labels.rotation & ",0,5)' " &
                                                    "text-anchor='" & If(xAxis.labels.rotation > 0, "start", xAxis.labels.rotation < 0, "end", "middle") & "'>" &
                                                    label &
                                                "</text>" &
                                            "</g>") &
                                        "</g>") &
                                    "</g>") &
                                    //Y Axis
                                    If(yAxis.enabled,"<g class='y-axis' transform='translate(" & If(yAxis.align = "left",0,Round(width - yAxis.style.width,3)) & ",0)'>" &
                                        If(!IsBlank(yAxis.title), "<text dy='.5em' " &
                                            "text-anchor='" & If(yAxis.titleStyle.align = "left","end","start") & "' " &
                                            "x='" & Round(If(yAxis.align="left",yAxis.style.width,0) + If(yAxis.titleStyle.align = "left",-10,10),3) & "' " &
                                            "y='0' " &
                                            "style='" &
                                                "fill:" & yAxis.titleStyle.color & ";" &
                                                "font-size:" & yAxis.titleStyle.fontSize & "px;" &
                                                "font-family:" & yAxis.titleStyle.fontFamily & ";" &
                                                "font-weight:" & yAxis.titleStyle.fontWeight & ";" &
                                                "font-style:" & yAxis.titleStyle.fontStyle & ";" & yAxis.titleStyle.additionalStyles & "'>" &
                                            yAxis.title &
                                        "</text>") &
                                        "<path transform='translate(" & Round(If(yAxis.align = "left", yAxis.style.width, 0),3) & ",0)' d='M0,0L3,10L-3,10L0,0V" & Round(plot.y + plot.height,3) & "'  "&
                                            "fill='" & yAxis.style.lineColor & "' " & 
                                            "stroke-width='" & yAxis.style.lineWidth & "' " &
                                            "stroke='" & yAxis.style.lineColor & "'/>" &
                                        "<g>" &
                                            "<g transform='translate(" & If(yAxis.align = "left", yAxis.style.width, 0) & "," & Round(plot.y + plot.height,3) & ")'>" &
                                                "<path d='M0,0H" & tickX & "' stroke-width='" & xAxis.style.tickWidth & "' stroke='" & yAxis.style.lineColor & "'/>" &
                                                If(yAxis.labels.enabled,
                                                "<text class='y-labels' dy='.5em' y='-5' text-anchor='"& labelAnchor & "' x='"& labelX & "'>" &
                                                    Text(minY, yAxis.labels.format) &
                                                "</text>") &
                                            "</g>" &
                                            Concat(ForAll(Filter(indexes, index <= RoundUp((maxY - minY) / stepY,0)),{
                                                y:Round(plot.y + (plot.height) * (1 - stepY * index / (maxY - minY)),3),
                                                label:Text(minY + index * stepY, yAxis.labels.format)
                                            }),
                                            "<g transform='translate(" & If(yAxis.align = "left", yAxis.style.width, 0) & "," & y & ")'>" &
                                                "<path d='M0,0H" & tickX & "' stroke-width='" & yAxis.style.tickWidth & "' stroke='" & yAxis.style.lineColor & "'/>" &
                                                If(yAxis.labels.enabled,
                                                "<text class='y-labels' dy='.5em' y='-5' text-anchor='"& labelAnchor & "' x='"& labelX & "'>" &
                                                    label &
                                                "</text>") &
                                            "</g>") &
                                        "</g>" &
                                    "</g>") &
                                    "<g transform='translate("&plot.x&","&Round(plot.y+plot.height,3)&")'>" &
                                        Concat(Sort(ForAll(data,{
                                            id:id,
                                            color:color,
                                            borderColor:Coalesce(style.borderColor,color),
                                            points:AddColumns(values,
                                                "xPos",Round(plot.width * (x - minX) / (maxX - minX),3),
                                                "yPos",Round(plot.height * (y - minY) / (minY - maxY),3),
                                                "radius",Round((z-minZ) / (maxZ - minZ) * (style.maxSize - style.minSize) + style.minSize / 2,3)
                                            )
                                        }),id,SortOrder.Descending),
                                            "<g fill='"& color &"' " &
                                                "stroke='"& borderColor &"' " &
                                                "stroke-width='"& style.borderWidth &"' " &
                                                "fill-opacity='"& style.fillOpacity &"'>" &
                                            Concat(points,
                                                "<circle data-z='" & z & "' data-min='" & minZ & "' data-max='" & maxZ & "' data-max-size='" & style.maxSize & "' data-min-size='" & style.minSize & "' cx='" & xPos & "' " &
                                                    "cy='" & yPos & "' " &
                                                    "r='" & radius & "'/>") &
                                            "</g>"
                                        ) &
                                    "</g>"
                                    )
                                )
                            ),
                        "</svg>"
                    ),
                    "%", "%25"), "<", "%3C"), ">", "%3E"), "#", "%23"), "{", "%7B"), "}", "%7D")
            ))
        PressedBorderColor: =ColorFade(Scatter.BorderColor, -20%)
        PressedFill: =ColorFade(Scatter.Fill, -20%)
        Width: =PlotArea.Width
        X: =PlotArea.X
        Y: =PlotArea.Y
        ZIndex: =6

    Bar As image:
        FocusedBorderColor: =Bar.BorderColor
        Height: =PlotArea.Height
        HoverBorderColor: =ColorFade(Bar.BorderColor, 20%)
        HoverFill: =ColorFade(Bar.Fill, 20%)
        Image: |-
            =If(Chart.Type = "Bar", Concat(
                Table({
                    width: PlotArea.Width,
                    height: PlotArea.Height,
                    colors:RenameColumns(Chart.Colors,"Value","color"),
                    indexes: ForAll(
                        ForAll(Split(
                            Concat(
                                Table({ 
                                    indexes: ForAll(
                                        ForAll(Split(Coalesce(LookUp(Parent.Options, key="indexes").value, "1,2,3,4,5,6,7,8,9,10"), ","), {Result: ThisRecord.Value}),
                                        Value(Result)
                                    )
                                }),
                                Concat(
                                    RenameColumns(indexes, "Value","baseIndex"), 
                                    Concat(indexes, Text((baseIndex - 1) * CountRows(indexes) + Value), ","),
                                    ","
                                )
                            ), ","), {Result: ThisRecord.Value}),
                        { index: Value(Result) }
                    ) //1, 2, 3, 4, ..., 99, 100
                }), 
                 Substitute(Substitute(Substitute(Substitute(Substitute(Substitute(
                    Concatenate(
                        "data:image/svg+xml;charset=utf8,", 
                        "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 " & width & " " & height & "'>",
                            Concat(Table({
                                xAxis:{
                                    enabled: LookUp(Chart.Options, key="x").value <> "false",
                                    title: LookUp(Chart.Options, key="x.title").value,
                                    titleStyle: {
                                        y:Round(Value(Coalesce(LookUp(Chart.Options, key = "x.title.y").value,"-10")),3),
                                        align:If(LookUp(Chart.Options, key="x.title.align").value = "left","left","right"),
                                        fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = "x.title.fontSize").value,"14")),3),
                                        fontFamily: LookUp(Chart.Options, key = "x.title.fontFamily").value,
                                        fontWeight: Coalesce(LookUp(Chart.Options, key="x.title.fontWeight").value,"bold"),
                                        fontStyle: Coalesce(LookUp(Chart.Options, key="x.title.fontStyle").value,"normal"),
                                        color: Coalesce(LookUp(Chart.Options, key="x.title.color").value,"#333333"),
                                        additionalStyles: LookUp(Chart.Options, key="x.title.additionalStyles").value
                                    },
                                    style: {
                                        height: Round(Value(Coalesce(LookUp(Chart.Options, key = "x.height").value,"20")),3),
                                        lineWidth: Round(Value(Coalesce(LookUp(Chart.Options, key = "x.lineWidth").value,"1")),3),
                                        lineColor: Coalesce(LookUp(Chart.Options, key = "x.lineColor").value,"#333333"),
                                        tickLength: Round(Value(Coalesce(LookUp(Chart.Options, key = "x.tickLength").value,"5")),3),
                                        tickWidth: Round(Value(Coalesce(LookUp(Chart.Options, key = "x.tickWidth").value,"1")),3)
                                    },
                                    labels: {
                                        enabled: LookUp(Chart.Options, key="x.labels").value <> "false",
                                        format: LookUp(Chart.Options, key = "x.labels.format").value,
                                        rotation: Round(Value(LookUp(Chart.Options, key = "x.labels.rotation").value),3),
                                        fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = "x.labels.fontSize").value,"12")),3),
                                        fontFamily: LookUp(Chart.Options, key = "x.labels.fontFamily").value,
                                        fontWeight: Coalesce(LookUp(Chart.Options, key="x.labels.fontWeight").value,"bold"),
                                        fontStyle: Coalesce(LookUp(Chart.Options, key="x.labels.fontStyle").value,"normal"),
                                        color: Coalesce(LookUp(Chart.Options, key="x.labels.color").value,"#333333"),
                                        additionalStyles: LookUp(Chart.Options, key="x.labels.additionalStyles").value
                                    }
                                },
                                yAxis:{
                                    enabled: LookUp(Chart.Options, key="y").value <> "false",
                                    title: LookUp(Chart.Options, key="y.title").value,
                                    titleStyle: {
                                        align:If(LookUp(Chart.Options, key="y.title.align").value = "left","left","right"),
                                        fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = "y.title.fontSize").value,"14")),3),
                                        fontFamily: LookUp(Chart.Options, key = "y.title.fontFamily").value,
                                        fontWeight: Coalesce(LookUp(Chart.Options, key="y.title.fontWeight").value,"bold"),
                                        fontStyle: Coalesce(LookUp(Chart.Options, key="y.title.fontStyle").value,"normal"),
                                        color: Coalesce(LookUp(Chart.Options, key="y.title.color").value,"#333333"),
                                        additionalStyles: LookUp(Chart.Options, key="y.title.additionalStyles").value
                                    },
                                    align:Coalesce(LookUp(Chart.Options, key="y.align").value,"left"),
                                    step:Round(Value(LookUp(Chart.Options, key = "y.step").value),3),
                                    min:Round(Value(LookUp(Chart.Options, key = "y.min").value),3),
                                    max:Round(Value(LookUp(Chart.Options, key = "y.max").value),3),
                                    style: {
                                        width: Round(Value(Coalesce(LookUp(Chart.Options, key = "y.width").value,"50")),3),
                                        lineWidth: Round(Value(Coalesce(LookUp(Chart.Options, key = "y.lineWidth").value,"1")),3),
                                        lineColor: Coalesce(LookUp(Chart.Options, key = "y.lineColor").value,"#333333"),
                                        tickLength: Round(Value(Coalesce(LookUp(Chart.Options, key = "y.tickLength").value,"5")),3),
                                        tickWidth: Round(Value(Coalesce(LookUp(Chart.Options, key = "y.tickWidth").value,"1")),3),
                                        padTop:Round(Value(Coalesce(LookUp(Chart.Options, key = "y.padTop").value,"20")),3)
                                    },
                                    labels: {
                                        enabled: LookUp(Chart.Options, key="y.labels").value <> "false",
                                        format: Coalesce(LookUp(Chart.Options, key = "y.labels.format").value,"0"),
                                        fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = "y.labels.fontSize").value,"12")),3),
                                        fontFamily: LookUp(Chart.Options, key = "y.labels.fontFamily").value,
                                        fontWeight: Coalesce(LookUp(Chart.Options, key="y.labels.fontWeight").value,"bold"),
                                        fontStyle: Coalesce(LookUp(Chart.Options, key="y.labels.fontStyle").value,"normal"),
                                        color: Coalesce(LookUp(Chart.Options, key="y.labels.color").value,"#333333"),
                                        additionalStyles: LookUp(Chart.Options, key="y.labels.additionalStyles").value
                                    }
                                },
                                stacked: LookUp(Chart.Options, key="bar.stacked").value = "true",
                                style:{
                                    itemGap:Round(Value(Coalesce(LookUp(Chart.Options, key = "bar.itemGap").value,"5")),3),
                                    fillOpacity:Round(Value(Coalesce(LookUp(Chart.Options, key = "bar.fillOpacity").value,"1")),3),
                                    borderWidth:Round(Value(LookUp(Chart.Options, key = "bar.borderWidth").value),3),
                                    borderColor:LookUp(Chart.Options, key = "bar.borderColor").value
                                },
                                labels:Chart.Data.labels,
                                legends:If(Chart.Legend.source = "labels", Chart.Data.labels, Chart.Data.legends)
                            }),
                                Concat(Table({
                                    data:ForAll(FirstN(indexes,CountRows(legends)),{
                                        index:index,
                                        color:Last(FirstN(colors,index)).color,
                                        values:ForAll(LookUp(Chart.Data.table, key=index & ".y").values,{Value:Round(Value(Value),3)})
                                    }),
                                    plot:{
                                        x:If(yAxis.enabled && yAxis.align = "left",yAxis.style.width,0),
                                        y:If(yAxis.enabled, yAxis.style.padTop, 0),
                                        width:If(yAxis.enabled, Round(width - yAxis.style.width,3), width),
                                        height:Round(height - If(xAxis.enabled,xAxis.style.height,0) - If(yAxis.enabled,yAxis.style.padTop,0),3)
                                    },
                                    xSpaces:CountRows(labels) + 1,
                                    seriesCount:If(stacked,1,CountRows(legends))
                                }),
                                    Concat(AddColumns(Table({
                                        barWidth:Round(Min(plot.width / xSpaces / seriesCount - style.itemGap,plot.width / xSpaces / seriesCount),3),
                                        xSpaceWidth:Round((plot.width / xSpaces),3),
                                        labels:ForAll(FirstN(indexes,CountRows(labels)),{
                                            x:Round(index * (plot.width / xSpaces),3),
                                            labelText:Last(FirstN(labels,index)).Value
                                        }),
                                        data:ForAll(data,{
                                            id:index,
                                            color:color,
                                            values:ForAll(FirstN(indexes,CountRows(labels)),{
                                                index:index,
                                                value:If(CountRows(values) < index, 0, Last(FirstN(values,index)).Value)
                                            })
                                        }),
                                        min:If(yAxis.max <> yAxis.min,yAxis.min,stacked,0,RoundDown(Min(data,Min(values,Value)) - Max((Max(data,Max(values,Value)) - Min(data,Min(values,Value))) / 10,10),0)),
                                        max:If(yAxis.max <> yAxis.min,yAxis.max,stacked,Max(ForAll(RenameColumns(FirstN(indexes,CountRows(labels)),"index","i"),{Value:Sum(data, Last(FirstN(values,i)).Value)}),Value),RoundUp(Max(data,Max(values,Value)),0)),
                                        tickX:Round(If(yAxis.align = "left", -yAxis.style.tickLength, yAxis.style.tickLength),3),
                                        labelX:Round(If(yAxis.align = "left",-yAxis.style.tickLength-5,yAxis.style.tickLength + 5),3),
                                        labelAnchor:If(yAxis.align = "left","end","start")
                                    }),"step",If(yAxis.step = 0,RoundUp((max - min) / 5,0),yAxis.step)),
                                    //X Axis
                                    "<style>" &
                                        ".x-labels{fill:"& xAxis.labels.color &";font-size:" & xAxis.labels.fontSize & "px;font-family:'" & xAxis.labels.fontFamily & "';font-weight:" & xAxis.labels.fontWeight & ";font-style:" & xAxis.labels.fontStyle & ";" & xAxis.labels.additionalStyles & "}"&
                                        ".y-labels{fill:"& yAxis.labels.color &";font-size:" & yAxis.labels.fontSize & "px;font-family:'" & yAxis.labels.fontFamily & "';font-weight:" & yAxis.labels.fontWeight & ";font-style:" & yAxis.labels.fontStyle & ";" & yAxis.labels.additionalStyles & "}"&
                                    "</style>" &
                                    If(xAxis.enabled,"<g class='x-axis' transform='translate(" & plot.x & "," & Round(plot.y + plot.height,3) & ")'>" &
                                        "<path d='M0,0H" & Round(plot.x + plot.width,3) & "'  "&
                                            "fill='none' " & 
                                            "stroke-width='" & xAxis.style.lineWidth & "' " &
                                            "stroke='" & xAxis.style.lineColor & "'/>" &
                                        If(!IsBlank(xAxis.title), "<text dy='0.35em' " &
                                            "text-anchor='" & If(xAxis.titleStyle.align = "left","start","end") & "' " &
                                            "x='" & If(xAxis.titleStyle.align="left",10,Round(width - yAxis.style.width - 10,3)) & "' " &
                                            "y='" & xAxis.titleStyle.y & "' " &
                                            "style='" &
                                                "fill:" & xAxis.titleStyle.color & ";" &
                                                "font-size:" & xAxis.titleStyle.fontSize & "px;" &
                                                "font-family:" & xAxis.titleStyle.fontFamily & ";" &
                                                "font-weight:" & xAxis.titleStyle.fontWeight & ";" &
                                                "font-style:" & xAxis.titleStyle.fontStyle & ";" & xAxis.titleStyle.additionalStyles & "'>" &
                                            xAxis.title &
                                        "</text>") &
                                        "<g>" &
                                            Concat(labels,
                                            "<g transform='translate(" & x & ",0)'>" &
                                                "<path d='M0,0V" & xAxis.style.tickLength & "' stroke-width='" & xAxis.style.tickWidth & "' stroke='" & xAxis.style.lineColor & "'/>" &
                                                If(xAxis.labels.enabled, "<text transform='rotate(" & xAxis.labels.rotation & ",0,5)' class='x-labels' dy='1em' y='5' text-anchor='"& If(xAxis.labels.rotation > 0,"start",xAxis.labels.rotation < 0,"end", "middle") & "' x='0'>" &
                                                    labelText &
                                                "</text>") &
                                            "</g>") &
                                        "</g>" &
                                    "</g>") &
                                    //Y Axis
                                    If(yAxis.enabled,"<g class='y-axis' transform='translate(" & If(yAxis.align = "left",0,Round(width - yAxis.style.width,3)) & ",0)'>" &
                                        If(!IsBlank(yAxis.title), "<text dy='.5em' " &
                                            "text-anchor='" & If(yAxis.titleStyle.align = "left","end","start") & "' " &
                                            "x='" & Round(If(yAxis.align="left",yAxis.style.width,0) + If(yAxis.titleStyle.align = "left",-10,10),3) & "' " &
                                            "y='0' " &
                                            "style='" &
                                                "fill:" & yAxis.titleStyle.color & ";" &
                                                "font-size:" & yAxis.titleStyle.fontSize & "px;" &
                                                "font-family:" & yAxis.titleStyle.fontFamily & ";" &
                                                "font-weight:" & yAxis.titleStyle.fontWeight & ";" &
                                                "font-style:" & yAxis.titleStyle.fontStyle & ";" & yAxis.titleStyle.additionalStyles & "'>" &
                                            yAxis.title &
                                        "</text>") &
                                        "<path transform='translate(" & Round(If(yAxis.align = "left", yAxis.style.width, 0),3) & ",0)' d='M0,0L3,10L-3,10L0,0V" & Round(plot.y + plot.height,3) & "'  "&
                                            "fill='" & yAxis.style.lineColor & "' " & 
                                            "stroke-width='" & yAxis.style.lineWidth & "' " &
                                            "stroke='" & yAxis.style.lineColor & "'/>" &
                                        "<g>" &
                                            "<g transform='translate(" & If(yAxis.align = "left", yAxis.style.width, 0) & "," & Round(plot.y + plot.height,3) & ")'>" &
                                                "<path d='M0,0H" & tickX & "' stroke-width='" & yAxis.style.tickWidth & "' stroke='" & yAxis.style.lineColor & "'/>" &
                                                If(yAxis.labels.enabled,
                                                "<text class='y-labels' dy='.5em' y='-5' text-anchor='"& labelAnchor & "' x='"& labelX & "'>" &
                                                    Text(min, yAxis.labels.format) &
                                                "</text>") &
                                            "</g>" &
                                            Concat(ForAll(Filter(indexes, index <= RoundUp((max - min) / step,0)),{
                                                y:Round(plot.y + (plot.height) * (1 - step * index / (max - min)),3),
                                                label:Text(min + index * step, yAxis.labels.format)
                                            }),
                                            "<g transform='translate(" & If(yAxis.align = "left", yAxis.style.width, 0) & "," & y & ")'>" &
                                                "<path d='M0,0H" & tickX & "' stroke-width='" & yAxis.style.tickWidth & "' stroke='" & yAxis.style.lineColor & "'/>" &
                                                If(yAxis.labels.enabled,
                                                "<text class='y-labels' dy='.5em' y='-5' text-anchor='"& labelAnchor & "' x='"& labelX & "'>" &
                                                    label &
                                                "</text>") &
                                            "</g>") &
                                        "</g>" &
                                    "</g>") &
                                    "<g transform='translate("&plot.x&","&Round(plot.y+plot.height,3)&")'>" &
                                        Concat(Sort(ForAll(data,{
                                            id:id,
                                            color:color,
                                            borderColor:Coalesce(style.borderColor,color),
                                            points:AddColumns(values,
                                                "x",Round(index * xSpaceWidth,3),
                                                "y",Round(plot.height * (value - min) / (min - max),3),
                                                "baseY",If(stacked,Round(plot.height * (Sum(Filter(RenameColumns(data,"id","tempId"), tempId < id),Last(FirstN(values,index)).value)) / (min-max),3),0),
                                                "offsetX",If(!stacked,Round((barWidth + style.itemGap) * (id - 1),3))
                                            )
                                        }),id,SortOrder.Descending),
                                            "<g class='bar' transform='translate(" & Round(-(xSpaceWidth - style.itemGap) / 2,3) & ",0)' " &
                                                    "fill='" & color & "' " & 
                                                    "fill-opacity='" & style.fillOpacity & "'>" &
                                                Concat(points,
                                                    "<path d='M"& x + offsetX &","& baseY &
                                                        "V"& baseY + y &
                                                        "H"& x + offsetX + barWidth &
                                                        "V"& baseY &"' " & 
                                                    "stroke='" & borderColor & "' " & 
                                                    "stroke-width='" & style.borderWidth & "'/>") &
                                            "</g>"
                                        ) &
                                    "</g>"
                                    )
                                )
                            ),
                        "</svg>"
                    ),
                    "%", "%25"), "<", "%3C"), ">", "%3E"), "#", "%23"), "{", "%7B"), "}", "%7D")
            ))
        PressedBorderColor: =ColorFade(Bar.BorderColor, -20%)
        PressedFill: =ColorFade(Bar.Fill, -20%)
        Width: =PlotArea.Width
        X: =PlotArea.X
        Y: =PlotArea.Y
        ZIndex: =7

    Radar As image:
        FocusedBorderColor: =Radar.BorderColor
        Height: =PlotArea.Height
        HoverBorderColor: =ColorFade(Radar.BorderColor, 20%)
        HoverFill: =ColorFade(Radar.Fill, 20%)
        Image: |-
            =If(Chart.Type = "Radar", Concat(
                Table({
                    width: PlotArea.Width,
                    height: PlotArea.Height,
                    colors:RenameColumns(Chart.Colors,"Value","color"),
                    indexes: ForAll(
                        ForAll(Split(
                            Concat(
                                Table({ 
                                    indexes: ForAll(
                                        ForAll(Split(Coalesce(LookUp(Parent.Options, key="indexes").value, "1,2,3,4,5,6,7,8,9,10"), ","), {Result: ThisRecord.Value}),
                                        Value(Result)
                                    )
                                }),
                                Concat(
                                    RenameColumns(indexes, "Value","baseIndex"), 
                                    Concat(indexes, Text((baseIndex - 1) * CountRows(indexes) + Value), ","),
                                    ","
                                )
                            ), ","), {Result: ThisRecord.Value}),
                        { index: Value(Result) }
                    ) //1, 2, 3, 4, ..., 99, 100
                }), 
                 Substitute(Substitute(Substitute(Substitute(Substitute(Substitute(
                    Concatenate(
                        "data:image/svg+xml;charset=utf8,", 
                        "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 " & width & " " & height & "'>",
                            Concat(Table({
                                x:0,
                                y:0,
                                minInput:Round(Value(LookUp(Chart.Options, key = "y.min").value),3),
                                maxInput:Round(Value(LookUp(Chart.Options, key = "y.max").value),3),
                                stepInput:Round(Value(LookUp(Chart.Options, key = "y.step").value),3),
                                dataLabelsColor:Coalesce(LookUp(Chart.Options, key = "y.labels.color").value,"#000000"),
                                labelsColor:Coalesce(LookUp(Chart.Options, key = "radar.labelsColor").value,"#000000"),
                                lineWidth:Coalesce(LookUp(Chart.Options, key = "radar.lineWidth").value,"1"),
                                plotLineColor:Coalesce(LookUp(Chart.Options, key = "radar.plotLineColor").value,"#CCCCCC"),
                                plotLineWidth:Coalesce(LookUp(Chart.Options, key = "radar.plotLineWidth").value,"0.5"),
                                backgroundEven:Coalesce(LookUp(Chart.Options, key = "radar.backgroundEven").value,"#FAF4FB"),
                                backgroundOdd:Coalesce(LookUp(Chart.Options, key = "radar.backgroundOdd").value,"#ffffff"),
                                labels:Chart.Data.labels,
                                legends:If(Chart.Legend.source = "labels", Chart.Data.labels, Chart.Data.legends)
                            }),
                            Concat(Table({
                                data:ForAll(FirstN(indexes,CountRows(legends)),{
                                    color:Last(FirstN(colors,index)).color,
                                    values:ForAll(LookUp(Chart.Data.table, key=index & ".y").values,{Value:Round(Value(Value),3)})
                                })
                            }),
                                Concat(Table({
                                    data:ForAll(data,{
                                        color:color,
                                        values:ForAll(FirstN(indexes,CountRows(labels)),{
                                            Value:If(CountRows(values) < index, 0, Last(FirstN(values,index)).Value)
                                        })
                                    }),
                                    min:If(minInput = maxInput,RoundDown(Min(data,Min(values,Value)) - Max((Max(data,Max(values,Value)) - Min(data,Min(values,Value))) / 10,10),0),minInput),
                                    max:If(minInput = maxInput,RoundUp(Max(data,Max(values,Value)),0),maxInput)
                                }),
                                    Concat(Table({
                                        circleCol: ForAll(FirstN(indexes,If(stepInput = 0,5,RoundUp((max - min) / stepInput,0))+1), {
                                            index: index - 1, 
                                            value: Round(If(stepInput = 0, RoundUp((max - min) / 5,0),stepInput)*(index-1),0)
                                        })
                                    }),
                                    "<g max='" & max & "' min='" & min & "'>" &
                                        "<g fill='#ffffff' fill-opacity='0' transform='translate(0,0)'>" &
                                            "<rect width='"& width &"' height='"& height &"'></rect>" &
                                        "</g>" &
                                        "<g transform='translate("& width/2 &","& height/2 &")'>" &
                                            "<g class='backgroud'>" & Concat(circleCol, If(index=0, 
                                                "",
                                                "<circle cx='0' cy='0' r='"& (height/2 - 47)/(CountRows(circleCol)-1) * (CountRows(circleCol) - index)  &"' fill='"& If(Mod(index, 2) = 1, backgroundOdd, backgroundEven) &"' stroke-width='" & plotLineWidth & "' stroke='" & plotLineColor & "' />")) &
                                            "</g>" &
                                            "<g class='value-axis'>" & Concat(circleCol,
                                                "<text x='0' y='0' fill='" & dataLabelsColor & "' text-anchor='middle' dy='"& 5.5 + -1 * index*((height/2 - 47)/(CountRows(circleCol)-1)) &"'>"& value &"</text>") &
                                            "</g>" &
                                            "<g class='category-axis' stroke-width='" & plotLineWidth & "' stroke='" & plotLineColor & "' fill='none'>" & Concat(FirstN(indexes,CountRows(labels)),
                                                "<path d='M0,0  L"& Round((height/2 - 47) * Sin((180 + 360/CountRows(labels)*(index-1)) * Pi() / 180), 2)  &","& Round((height/2 - 47) * Cos((180 + 360/CountRows(labels)*(index-1)) * Pi() / 180),2) &" ' />") &
                                            "</g>" &
                                            "<g class='category-text'>" & Concat(FirstN(indexes,CountRows(labels)),
                                                "<g transform='translate("& Round((height/2 - 23.5) * Sin((180 + 360/CountRows(labels)*(index-1)) * Pi() / 180), 2) &","& Round((height/2 - 23.5) * Cos((180 + 360/CountRows(labels)*(index-1)) * Pi() / 180), 2) &")'>" &
                                                    "<text fill='" & labelsColor & "' text-anchor='"& If(360/CountRows(labels)*(index-1) <= 30, "middle", 360/CountRows(labels)*(index-1) <= 150, "end", 360/CountRows(labels)*(index-1) <= 210, "middle", 360/CountRows(labels)*(index-1) <= 340, "start", 360/CountRows(labels)*(index-1) <= 360, "middle") &"'>" &  
                                                        Last(FirstN(labels, index)).Value & 
                                                    "</text>" &
                                                "</g>") &
                                            "</g>" &
                                            "<g class='value' fill='none' stroke-width='" & lineWidth & "'>" &
                                                Concat(data,
                                                "<path stroke='" & color & "' d='" & 
                                                    Concat(FirstN(indexes,CountRows(labels)), 
                                                        If(index-1=0, 
                                                            "M" & Round(Last(FirstN(values, index)).Value * (height/2 - 47)/max * Sin((180 + 360/CountRows(values)*(index-1)) * Pi() / 180), 2) & "," & Round(Last(FirstN(values, index)).Value * (height/2 - 47)/max * Cos((180 + 360/CountRows(values)*(index-1)) * Pi() / 180), 2),  
                                                            "L" & Round(Last(FirstN(values, index)).Value * (height/2 - 47)/max * Sin((180 + 360/CountRows(values)*(index-1)) * Pi() / 180), 2) & "," & Round(Last(FirstN(values, index)).Value * (height/2 - 47)/max * Cos((180 + 360/CountRows(values)*(index-1)) * Pi() / 180), 2)
                                                        )
                                                    ) & " z'/>") &
                                            "</g>" &
                                        "</g>" &
                                    "</g>")
                                )
                            )
                        ),
                        "</svg>"
                    ),
                    "%", "%25"), "<", "%3C"), ">", "%3E"), "#", "%23"), "{", "%7B"), "}", "%7D")
            ))
        PressedBorderColor: =ColorFade(Radar.BorderColor, -20%)
        PressedFill: =ColorFade(Radar.Fill, -20%)
        Width: =PlotArea.Width
        X: =PlotArea.X
        Y: =PlotArea.Y
        ZIndex: =8

    Line As image:
        FocusedBorderColor: =Line.BorderColor
        Height: =PlotArea.Height
        HoverBorderColor: =ColorFade(Line.BorderColor, 20%)
        HoverFill: =ColorFade(Line.Fill, 20%)
        Image: |-
            =If(Chart.Type = "Line", Concat(
                Table({
                    width: PlotArea.Width,
                    height: PlotArea.Height,
                    colors:RenameColumns(Chart.Colors,"Value","color"),
                    indexes: ForAll(
                        ForAll(Split(
                            Concat(
                                Table({ 
                                    indexes: ForAll(
                                        ForAll(Split(Coalesce(LookUp(Parent.Options, key="indexes").value, "1,2,3,4,5,6,7,8,9,10"), ","), {Result: ThisRecord.Value}),
                                        Value(Result)
                                    )
                                }),
                                Concat(
                                    RenameColumns(indexes, "Value","baseIndex"), 
                                    Concat(indexes, Text((baseIndex - 1) * CountRows(indexes) + Value), ","),
                                    ","
                                )
                            ), ","), {Result: ThisRecord.Value}),
                        { index: Value(Result) }
                    ) //1, 2, 3, 4, ..., 99, 100
                }), 
                 Substitute(Substitute(Substitute(Substitute(Substitute(Substitute(
                    Concatenate(
                        "data:image/svg+xml;charset=utf8,", 
                        "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 " & width & " " & height & "'>",
                        Concat(Table({
                            xAxis:{
                                enabled: LookUp(Chart.Options, key="x").value <> "false",
                                title: LookUp(Chart.Options, key="x.title").value,
                                titleStyle: {
                                    y:Round(Value(Coalesce(LookUp(Chart.Options, key = "x.title.y").value,"-10")),3),
                                    align:If(LookUp(Chart.Options, key="x.title.align").value = "left","left","right"),
                                    fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = "x.title.fontSize").value,"14")),3),
                                    fontFamily: LookUp(Chart.Options, key = "x.title.fontFamily").value,
                                    fontWeight: Coalesce(LookUp(Chart.Options, key="x.title.fontWeight").value,"bold"),
                                    fontStyle: Coalesce(LookUp(Chart.Options, key="x.title.fontStyle").value,"normal"),
                                    color: Coalesce(LookUp(Chart.Options, key="x.title.color").value,"#333333"),
                                    additionalStyles: LookUp(Chart.Options, key="x.title.additionalStyles").value
                                },
                                style: {
                                    height: Round(Value(Coalesce(LookUp(Chart.Options, key = "x.height").value,"20")),3),
                                    lineWidth: Round(Value(Coalesce(LookUp(Chart.Options, key = "x.lineWidth").value,"1")),3),
                                    lineColor: Coalesce(LookUp(Chart.Options, key = "x.lineColor").value,"#333333"),
                                    tickLength: Round(Value(Coalesce(LookUp(Chart.Options, key = "x.tickLength").value,"5")),3),
                                    tickWidth: Round(Value(Coalesce(LookUp(Chart.Options, key = "x.tickWidth").value,"1")),3)
                                },
                                labels: {
                                    enabled: LookUp(Chart.Options, key="x.labels").value <> "false",
                                    format: LookUp(Chart.Options, key = "x.labels.format").value,
                                    rotation: Round(Value(LookUp(Chart.Options, key = "x.labels.rotation").value),3),
                                    fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = "x.labels.fontSize").value,"12")),3),
                                    fontFamily: LookUp(Chart.Options, key = "x.labels.fontFamily").value,
                                    fontWeight: Coalesce(LookUp(Chart.Options, key="x.labels.fontWeight").value,"bold"),
                                    fontStyle: Coalesce(LookUp(Chart.Options, key="x.labels.fontStyle").value,"normal"),
                                    color: Coalesce(LookUp(Chart.Options, key="x.labels.color").value,"#333333"),
                                    additionalStyles: LookUp(Chart.Options, key="x.labels.additionalStyles").value
                                }
                            },
                            yAxis:{
                                enabled: LookUp(Chart.Options, key="y").value <> "false",
                                title: LookUp(Chart.Options, key="y.title").value,
                                titleStyle: {
                                    align:If(LookUp(Chart.Options, key="y.title.align").value = "left","left","right"),
                                    fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = "y.title.fontSize").value,"14")),3),
                                    fontFamily: LookUp(Chart.Options, key = "y.title.fontFamily").value,
                                    fontWeight: Coalesce(LookUp(Chart.Options, key="y.title.fontWeight").value,"bold"),
                                    fontStyle: Coalesce(LookUp(Chart.Options, key="y.title.fontStyle").value,"normal"),
                                    color: Coalesce(LookUp(Chart.Options, key="y.title.color").value,"#333333"),
                                    additionalStyles: LookUp(Chart.Options, key="y.title.additionalStyles").value
                                },
                                align:Coalesce(LookUp(Chart.Options, key="y.align").value,"left"),
                                step:Round(Value(LookUp(Chart.Options, key = "y.step").value),3),
                                min:Round(Value(LookUp(Chart.Options, key = "y.min").value),3),
                                max:Round(Value(LookUp(Chart.Options, key = "y.max").value),3),
                                style: {
                                    width: Round(Value(Coalesce(LookUp(Chart.Options, key = "y.width").value,"50")),3),
                                    lineWidth: Round(Value(Coalesce(LookUp(Chart.Options, key = "y.lineWidth").value,"1")),3),
                                    lineColor: Coalesce(LookUp(Chart.Options, key = "y.lineColor").value,"#333333"),
                                    tickLength: Round(Value(Coalesce(LookUp(Chart.Options, key = "y.tickLength").value,"5")),3),
                                    tickWidth: Round(Value(Coalesce(LookUp(Chart.Options, key = "y.tickWidth").value,"1")),3),
                                    padTop:Round(Value(Coalesce(LookUp(Chart.Options, key = "y.padTop").value,"20")),3)
                                },
                                labels: {
                                    enabled: LookUp(Chart.Options, key="y.labels").value <> "false",
                                    format: Coalesce(LookUp(Chart.Options, key = "y.labels.format").value,"0"),
                                    fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = "y.labels.fontSize").value,"12")),3),
                                    fontFamily: LookUp(Chart.Options, key = "y.labels.fontFamily").value,
                                    fontWeight: Coalesce(LookUp(Chart.Options, key="y.labels.fontWeight").value,"bold"),
                                    fontStyle: Coalesce(LookUp(Chart.Options, key="y.labels.fontStyle").value,"normal"),
                                    color: Coalesce(LookUp(Chart.Options, key="y.labels.color").value,"#333333"),
                                    additionalStyles: LookUp(Chart.Options, key="y.labels.additionalStyles").value
                                }
                            },
                            stacked: LookUp(Chart.Options, key="line.stacked").value = "true",
                            style:{
                                lineWidth:Round(Value(Coalesce(LookUp(Chart.Options, key = "line.lineWidth").value,"2")),3),
                                fillOpacity:Round(Value(LookUp(Chart.Options, key = "line.fillOpacity").value),3),
                                markerSize:Round(Value(Coalesce(LookUp(Chart.Options, key = "line.markerSize").value,"16")),3),
                                marker:Coalesce(LookUp(Chart.Options, key = "line.marker").value,"circle")
                            },
                            labels:Chart.Data.labels,
                            legends:If(Chart.Legend.source = "labels", Chart.Data.labels, Chart.Data.legends)
                        }),
                            Concat(Table({
                                data:ForAll(FirstN(indexes,CountRows(legends)),{
                                    index:index,
                                    color:Last(FirstN(colors,index)).color,
                                    values:ForAll(LookUp(Chart.Data.table, key=index & ".y").values,{Value:Round(Value(Value),3)})
                                }),
                                labels:ForAll(FirstN(indexes,CountRows(labels)),{
                                    x:Round(index * ((width - If(yAxis.enabled,yAxis.style.width)) / (CountRows(labels) + 1)),3),
                                    labelText:Last(FirstN(labels,index)).Value
                                }),
                                plot:{
                                    x:If(yAxis.enabled && yAxis.align = "left",yAxis.style.width,0),
                                    y:If(yAxis.enabled, yAxis.style.padTop, 0),
                                    width:If(yAxis.enabled, Round(width - yAxis.style.width,3), width),
                                    height:Round(height - If(xAxis.enabled,xAxis.style.height,0) - If(yAxis.enabled,yAxis.style.padTop,0),3)
                                }
                            }),
                                Concat(AddColumns(Table({
                                    data:ForAll(data,{
                                        id:index,
                                        color:color,
                                        values:ForAll(FirstN(indexes,CountRows(labels)),{
                                            index:index,
                                            value:If(CountRows(values) < index, 0, Last(FirstN(values,index)).Value)
                                        })
                                    }),
                                    min:If(yAxis.max <> yAxis.min,yAxis.min,stacked,0,RoundDown(Min(data,Min(values,Value)) - Max((Max(data,Max(values,Value)) - Min(data,Min(values,Value))) / 10,10),0)),
                                    max:If(yAxis.max <> yAxis.min,yAxis.max,stacked,Max(ForAll(RenameColumns(FirstN(indexes,CountRows(labels)),"index","i"),{Value:Sum(data, Last(FirstN(values,i)).Value)}),Value),RoundUp(Max(data,Max(values,Value)),0)),
                                    tickX:Round(If(yAxis.align = "left", -yAxis.style.tickLength, yAxis.style.tickLength),3),
                                    labelX:Round(If(yAxis.align = "left",-yAxis.style.tickLength-5,yAxis.style.tickLength + 5),3),
                                    labelAnchor:If(yAxis.align = "left","end","start")
                                }),"step",If(yAxis.step = 0,RoundUp((max - min) / 5,0),yAxis.step)),
                                //X Axis
                                "<style>" &
                                    ".x-labels{fill:"& xAxis.labels.color &";font-size:" & xAxis.labels.fontSize & "px;font-family:'" & xAxis.labels.fontFamily & "';font-weight:" & xAxis.labels.fontWeight & ";font-style:" & xAxis.labels.fontStyle & ";" & xAxis.labels.additionalStyles & "}"&
                                    ".y-labels{fill:"& yAxis.labels.color &";font-size:" & yAxis.labels.fontSize & "px;font-family:'" & yAxis.labels.fontFamily & "';font-weight:" & yAxis.labels.fontWeight & ";font-style:" & yAxis.labels.fontStyle & ";" & yAxis.labels.additionalStyles & "}"&
                                "</style>" &
                                If(xAxis.enabled,"<g class='x-axis' transform='translate(" & plot.x & "," & Round(plot.y + plot.height,3) & ")'>" &
                                    "<path d='M0,0H" & Round(plot.x + plot.width,3) & "'  "&
                                        "fill='none' " & 
                                        "stroke-width='" & xAxis.style.lineWidth & "' " &
                                        "stroke='" & xAxis.style.lineColor & "'/>" &
                                    If(!IsBlank(xAxis.title), "<text dy='0.35em' " &
                                        "text-anchor='" & If(xAxis.titleStyle.align = "left","start","end") & "' " &
                                        "x='" & If(xAxis.titleStyle.align="left",10,Round(width - yAxis.style.width - 10,3)) & "' " &
                                        "y='" & xAxis.titleStyle.y & "' " &
                                        "style='" &
                                            "fill:" & xAxis.titleStyle.color & ";" &
                                            "font-size:" & xAxis.titleStyle.fontSize & "px;" &
                                            "font-family:" & xAxis.titleStyle.fontFamily & ";" &
                                            "font-weight:" & xAxis.titleStyle.fontWeight & ";" &
                                            "font-style:" & xAxis.titleStyle.fontStyle & ";" & xAxis.titleStyle.additionalStyles & "'>" &
                                        xAxis.title &
                                    "</text>") &
                                    "<g>" &
                                        Concat(labels,
                                        "<g transform='translate(" & x & ",0)'>" &
                                            "<path d='M0,0V" & xAxis.style.tickLength & "' stroke-width='" & xAxis.style.tickWidth & "' stroke='" & xAxis.style.lineColor & "'/>" &
                                            If(xAxis.labels.enabled, "<text transform='rotate(" & xAxis.labels.rotation & ",0,5)' class='x-labels' dy='1em' y='5' text-anchor='"& If(xAxis.labels.rotation > 0,"start",xAxis.labels.rotation < 0,"end", "middle") & "' x='0'>" &
                                                labelText &
                                            "</text>") &
                                        "</g>") &
                                    "</g>" &
                                "</g>") &
                                //Y Axis
                                If(yAxis.enabled,"<g class='y-axis' transform='translate(" & If(yAxis.align = "left",0,Round(width - yAxis.style.width,3)) & ",0)'>" &
                                    If(!IsBlank(yAxis.title), "<text dy='.5em' " &
                                        "text-anchor='" & If(yAxis.titleStyle.align = "left","end","start") & "' " &
                                        "x='" & Round(If(yAxis.align="left",yAxis.style.width,0) + If(yAxis.titleStyle.align = "left",-10,10),3) & "' " &
                                        "y='0' " &
                                        "style='" &
                                            "fill:" & yAxis.titleStyle.color & ";" &
                                            "font-size:" & yAxis.titleStyle.fontSize & "px;" &
                                            "font-family:" & yAxis.titleStyle.fontFamily & ";" &
                                            "font-weight:" & yAxis.titleStyle.fontWeight & ";" &
                                            "font-style:" & yAxis.titleStyle.fontStyle & ";" & yAxis.titleStyle.additionalStyles & "'>" &
                                        yAxis.title &
                                    "</text>") &
                                    "<path transform='translate(" & Round(If(yAxis.align = "left", yAxis.style.width, 0),3) & ",0)' d='M0,0L3,10L-3,10L0,0V" & Round(plot.y + plot.height,3) & "'  "&
                                        "fill='" & yAxis.style.lineColor & "' " & 
                                        "stroke-width='" & yAxis.style.lineWidth & "' " &
                                        "stroke='" & yAxis.style.lineColor & "'/>" &
                                    "<g>" &
                                        "<g transform='translate(" & If(yAxis.align = "left", yAxis.style.width, 0) & "," & Round(plot.y + plot.height,3) & ")'>" &
                                            "<path d='M0,0H" & tickX & "' stroke-width='" & yAxis.style.tickWidth & "' stroke='" & yAxis.style.lineColor & "'/>" &
                                            If(yAxis.labels.enabled,
                                            "<text class='y-labels' dy='.5em' y='-5' text-anchor='"& labelAnchor & "' x='"& labelX & "'>" &
                                                Text(min, yAxis.labels.format) &
                                            "</text>") &
                                        "</g>" &
                                        Concat(ForAll(Filter(indexes, index <= RoundUp((max - min) / step,0)),{
                                            y:Round(plot.y + (plot.height) * (1 - step * index / (max - min)),3),
                                            label:Text(min + index * step, yAxis.labels.format)
                                        }),
                                        "<g transform='translate(" & If(yAxis.align = "left", yAxis.style.width, 0) & "," & y & ")'>" &
                                            "<path d='M0,0H" & tickX & "' stroke-width='" & yAxis.style.tickWidth & "' stroke='" & yAxis.style.lineColor & "'/>" &
                                            If(yAxis.labels.enabled,
                                            "<text class='y-labels' dy='.5em' y='-5' text-anchor='"& labelAnchor & "' x='"& labelX & "'>" &
                                                label &
                                            "</text>") &
                                        "</g>") &
                                    "</g>" &
                                "</g>") &
                                "<g transform='translate("&plot.x&","&Round(plot.y+plot.height,3)&")'>" &
                                    Concat(Sort(ForAll(data,{
                                        id:id,
                                        color:color,
                                        points:AddColumns(values,
                                            "x",Round(index * (plot.width / (CountRows(labels) + 1)),3),
                                            "y",Round(plot.height * (value - min) / (min - max),3),
                                            "baseY",If(stacked,Round(plot.height * (Sum(Filter(RenameColumns(data,"id","tempId"), tempId < id),Last(FirstN(values,index)).value)) / (min-max),3),0)
                                        )
                                    }),id,SortOrder.Descending),
                                        "<g class='line'>" &
                                            "<path d='M" & First(points).x & "," & First(points).baseY & Concat(points,"L" & x & "," & baseY + y) & Concat(Sort(points,index,SortOrder.Descending), "L" & x & "," & baseY) & "Z' " &
                                                "stroke='none' " &
                                                "fill='" & color & "' " &
                                                "fill-opacity='" & style.fillOpacity & "'/>" &
                                            "<path d='M" & Concat(points, x & "," & baseY + y,"L") & "' " &
                                                "fill='none' " &
                                                "stroke='" & color & "' " &
                                                "stroke-width='" & style.lineWidth & "'/>" &
                                            Concat(points,
                                                Switch(style.marker,
                                                "circle",
                                                    "<circle cx='" & x & "' " &
                                                        "cy='" & baseY + y & "' " &
                                                        "r='" & Round(style.markerSize / 2,3) & "' " &
                                                        "fill='" & color & "'/>"
                                                )
                                            ) &
                                        "</g>"
                                    ) &
                                "</g>"
                                )
                            )
                        ),
                        "</svg>"
                    ),
                    "%", "%25"), "<", "%3C"), ">", "%3E"), "#", "%23"), "{", "%7B"), "}", "%7D")
            ))
        PressedBorderColor: =ColorFade(Line.BorderColor, -20%)
        PressedFill: =ColorFade(Line.Fill, -20%)
        Width: =PlotArea.Width
        X: =PlotArea.X
        Y: =PlotArea.Y
        ZIndex: =9

    PlotArea As image:
        FocusedBorderColor: =PlotArea.BorderColor
        Height: =Round(If(IsBlank(Chart.Title.text), Chart.Height, Chart.Height - Header_1.Height) - If(Chart.Legend.enabled && (Chart.Legend.placement = "top" || Chart.Legend.placement = "bottom"),Chart.Legend.height,0),3)
        HoverBorderColor: =ColorFade(PlotArea.BorderColor, 20%)
        HoverFill: =ColorFade(PlotArea.Fill, 20%)
        Image: =
        PressedBorderColor: =ColorFade(PlotArea.BorderColor, -20%)
        PressedFill: =ColorFade(PlotArea.Fill, -20%)
        Width: =Round(Chart.Width - If(Chart.Legend.enabled && (Chart.Legend.placement = "left" || Chart.Legend.placement = "right"),Chart.Legend.width,0),3)
        X: =Round(If(Chart.Legend.enabled && Chart.Legend.placement = "left", Chart.Legend.width,0),3)
        Y: =Round(Header_1.Height + If(Chart.Legend.enabled && Chart.Legend.placement = "top", Chart.Legend.height, 0), 3)
        ZIndex: =10

    Header_1 As image:
        FocusedBorderColor: =Header_1.BorderColor
        Height: =Parent.Title.paddingTop + Parent.Title.height + If(IsBlank(Parent.Subtitle.text), 0, Parent.Subtitle.paddingTop + Parent.Subtitle.height)
        HoverBorderColor: =ColorFade(Header_1.BorderColor, 20%)
        HoverFill: =ColorFade(Header_1.Fill, 20%)
        Image: |-
            = Substitute(Substitute(Substitute(Substitute(Substitute(Substitute(
                Concatenate(
                    "data:image/svg+xml;charset=utf8,", 
                    "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 " & Header_1.Width & " " & Header_1.Height & "'>",
                    If(!IsBlank(Chart.Title.text), Concatenate(
                        "<g>",
                            "<text x='" & Round(Switch(Chart.Title.align,"left",0,"right", Header_1.Width, Header_1.Width/2),3) & "' " &
                                    "y='" & Chart.Title.paddingTop & "' " &
                                    "dy='1em' " &
                                    "text-anchor='" & Switch(Chart.Title.align,"left","start","right","end","middle") &"'>" &
                                "<tspan style='" &
                                        "fill:" & Chart.Title.color & ";" &
                                        "font-size:" & Chart.Title.fontSize & "px;" &
                                        "font-family:" & Chart.Title.fontFamily & ";" &
                                        "font-weight:" & Chart.Title.fontWeight & ";" &
                                        "font-style:" & Chart.Title.fontStyle & ";" & Chart.Title.additionalStyles & "'>" &
                                    Chart.Title.text &
                                "</tspan>",
                                If(!IsBlank(Chart.Subtitle.text), 
                                    "<tspan " & Switch(Chart.Subtitle.align,
                                                "left","text-anchor='start' x='0' ",
                                                "right","text-anchor='end' x='" & Round(Header_1.Width,3) & "' ",
                                                "center","x='" & Round(Header_1.Width/2,3) & "' ") &
                                            "y='" & (Chart.Title.paddingTop + Chart.Title.height + Chart.Subtitle.paddingTop) & "' " &
                                            "dy='0em' " &
                                            "style='" &
                                        "fill:" & Chart.Subtitle.color & ";" &
                                        "font-size:" & Chart.Subtitle.fontSize & "px;" &
                                        "font-family:" & Chart.Subtitle.fontFamily & ";" &
                                        "font-weight:" & Chart.Subtitle.fontWeight & ";" &
                                        "font-style:" & Chart.Subtitle.fontStyle & ";" & Chart.Subtitle.additionalStyles & "'>" &
                                        Chart.Subtitle.text &
                                    "</tspan>"),
                            "</text>",
                        "</g>"
                    )),
                    "</svg>"
                ),
            "%", "%25"), "<", "%3C"), ">", "%3E"), "#", "%23"), "{", "%7B"), "}", "%7D")
        PressedBorderColor: =ColorFade(Header_1.BorderColor, -20%)
        PressedFill: =ColorFade(Header_1.Fill, -20%)
        Width: =Parent.Width
        ZIndex: =11

