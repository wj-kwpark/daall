GanttChart As CanvasComponent:
    Colors: |-
        =["#31825d", "#30a667", "#5ec16c", "#f6c790", "#f7c772", "#f7b45b", "#f68f64", "#d46068", "#946eb0", "#769acc", "#60c5ea"]
    Data: |-
        ={
            legends: ["Label1","Label2","Label3","Label4","Label5"],
            clabels: ["Process 1","Process 2","Process 3","Process 4","Process 5"],
            intervals: Table(
                {start:"01/10/2018",end:"02/01/2018",colorindex:1,process:1},        {start:"03/10/2018",end:"05/01/2018",colorindex:5,process:2}
            )
        }
    Fill: =RGBA(0, 0, 0, 0)
    Height: =640
    Legend: |-
        ={
            enabled: true,
            placement: "bottom",
            width: 100,
            height: 45,
            itemGap: 5,
            fontSize: 14,
            fontFamily: "",
            fontWeight: "bold",
            fontStyle: "normal",
            color: "#666666",
            align: "center"
        }
    OnReset: =
    Options: |-
        =Table(
            {key:"gantt.type", value:"month"},
            {key:"gantt.step", value:"3"},
            {key:"gantt.startDate", value:"01/18/2018"},
            {key:"gantt.endDate", value:"06/25/2018"},
            {key:"gantt.lineColor", value:"#5a5252"},
            {key:"gantt.fontColor", value:"#5a5252"},
            {key:"gantt.barHeight", value:"30"},
            {key:"gantt.rowHeight", value:"50"},
            {key:"gantt.rowHeaderHeight", value:"60"},
            {key:"gantt.columnHeaderWidth", value:"120"},
            {key:"gantt.rowHeaderFontSize", value:"12"},
            {key:"gantt.rowHeaderFontSize", value:"12"}
        )
    Subtitle: |-
        ={
            text: "Subtitle",
            height: 12,
            align: "center",
            paddingTop: 12,
            fontSize: 12,
            fontFamily: "",
            fontWeight: "bold",
            fontStyle: "normal",
            color: "#808080",
            additionalStyles: ""
        }
    Title: |-
        ={
            text: "Title",
            height: 20,
            align: "center",
            paddingTop: 10,
            fontSize: 20,
            fontFamily: "",
            fontWeight: "bold",
            fontStyle: "normal",
            color: "#666666",
            additionalStyles: ""
        }
    Width: =640
    X: =0
    Y: =0
    ZIndex: =1

    GanttLegend As image:
        FocusedBorderColor: =GanttLegend.BorderColor
        Height: =If(Parent.Legend.placement = "top" || Parent.Legend.placement = "bottom", Parent.Legend.height, Parent.Height)
        HoverBorderColor: =ColorFade(GanttLegend.BorderColor, 20%)
        HoverFill: =ColorFade(GanttLegend.Fill, 20%)
        Image: |-
            =If(Parent.Legend.enabled, Concat(
                Table({
                    items: Parent.Data.legends,
                    indexes: ForAll(
                        ForAll(Split(
                            Concat(
                                Table({ 
                                    indexes: ForAll(
                                        ForAll(Split(Coalesce(LookUp(Parent.Options, key="indexes").value, "1,2,3,4,5,6,7,8,9,10"), ","), {Result: ThisRecord.Value}),
                                        Value(Result)
                                    )
                                }),
                                Concat(
                                    RenameColumns(indexes, "Value","baseIndex"), 
                                    Concat(indexes, Text((baseIndex - 1) * CountRows(indexes) + Value), ","),
                                    ","
                                )
                            ), ","), {Result: ThisRecord.Value}),
                        { index: Value(Result) }
                    ) //1, 2, 3, 4, ..., 99, 100
                }),
                Substitute(Substitute(Substitute(Substitute(Substitute(Substitute(
                    Concatenate(
                        "data:image/svg+xml;charset=utf8,", 
                        "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 " & GanttLegend.Width & " " & GanttLegend.Height & "'>",
                        "<g>",
                            "<style>",
                                ".legend{padding:5px;color:" & Parent.Legend.color & ";text-align:" & Parent.Legend.align & ";font-family:" & Parent.Legend.fontFamily & ";font-size:" & Parent.Legend.fontSize & "px;font-weight:" & Parent.Legend.fontWeight & ";font-style:" & Parent.Legend.fontStyle & ";}",
                                ".legend>span{display:inline-block;margin-right:" & Parent.Legend.itemGap & "px;}",
                                ".legend>span>i{display:inline-block;width:1em;height:1em;background-color:silver;margin-right:5px;vertical-align:middle;border:1px solid white;border-radius:20%;}",
                                ".legend>span>span{vertical-align: middle;}",
                                ".legend.legend-aside>span{display:block;margin-bottom:" & Parent.Legend.itemGap & "px;}",
                            "</style>",
                            "<foreignObject x='0' y='0' width='100%' height='100%'>",
                                "<div xmlns='http://www.w3.org/1999/xhtml' class='legend " & If(Parent.Legend.placement = "left" || Parent.Legend.placement = "right", "legend-aside", "") & "'>",
                                    Concat(
                                        ForAll(
                                            FirstN(indexes, CountRows(items)),
                                            {
                                                color:Last(FirstN(Parent.Colors, index)).Value,
                                                text:Last(FirstN(items, index)).Value
                                            }),
                                        Concatenate(
                                            "<span xmlns='http://www.w3.org/1999/xhtml'>",
                                                "<i xmlns='http://www.w3.org/1999/xhtml' style='background-color:" & color & ";'></i>",
                                                "<span xmlns='http://www.w3.org/1999/xhtml'>" & text & "</span>",
                                            "</span>")
                                    ),
                                "</div>",
                            "</foreignObject>",
                        "</g>",
                    "</svg>"),
                    "%", "%25"), "<", "%3C"), ">", "%3E"), "#", "%23"), "{", "%7B"), "}", "%7D")
                )
            )
        PressedBorderColor: =ColorFade(GanttLegend.BorderColor, -20%)
        PressedFill: =ColorFade(GanttLegend.Fill, -20%)
        Width: =If(Parent.Legend.placement = "top" || Parent.Legend.placement = "bottom", Parent.Width, Parent.Legend.width)
        X: = If(Parent.Legend.placement = "right", Round(Parent.Width - Parent.Legend.width, 3), 0)
        Y: =If(Parent.Legend.placement = "bottom", Round(Parent.Height - Parent.Legend.height ,3), GanttHeader.Height)
        ZIndex: =1

    Gantt As image:
        FocusedBorderColor: =Gantt.BorderColor
        Height: =Round(If(IsBlank(Parent.Title.text), Parent.Height, Parent.Height - GanttHeader.Height) - If(Parent.Legend.enabled && (Parent.Legend.placement = "top" || Parent.Legend.placement = "bottom"),Parent.Legend.height,0),3)
        HoverBorderColor: =ColorFade(Gantt.BorderColor, 20%)
        HoverFill: =ColorFade(Gantt.Fill, 20%)
        Image: |-
            =Concat(
                Table({
                    width: Gantt.Width,
                    height: Gantt.Height,
                    colors:RenameColumns(Parent.Colors,"Value","color"),
                    indexes: ForAll(
                        ForAll(Split(
                            Concat(
                                Table({ 
                                    indexes: ForAll(
                                        ForAll(Split(Coalesce(LookUp(Parent.Options, key="indexes").value, "1,2,3,4,5,6,7,8,9,10"), ","), {Result: ThisRecord.Value}),
                                        Value(Result)
                                    )
                                }),
                                Concat(
                                    RenameColumns(indexes, "Value","baseIndex"), 
                                    Concat(indexes, Text((baseIndex - 1) * CountRows(indexes) + Value), ","),
                                    ","
                                )
                            ), ","), {Result: ThisRecord.Value}),
                        { index: Value(Result) }
                    ) //1, 2, 3, 4, ..., 99, 100
                }), 
                 Substitute(Substitute(Substitute(Substitute(Substitute(Substitute(
                    Concatenate(
                        "data:image/svg+xml;charset=utf8,", 
                        "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 " & width & " " & height & "'>",
                            Concat(AddColumns(
                                            AddColumns(
                                                        AddColumns(
                                                                    AddColumns(Table({
                                                                                        clabels:Parent.Data.clabels,
                                                                                        intervals:Parent.Data.intervals,
                                                                                        padLeft:Round(Value(Coalesce(LookUp(Parent.Options, key = "table.padLeft").value,"5")),3),
                                                                                        padRight:Round(Value(Coalesce(LookUp(Parent.Options, key = "table.padRight").value,"5")),3),
                                                                                        padTop:Round(Value(Coalesce(LookUp(Parent.Options, key = "table.padTop").value,"5")),3),
                                                                                        rowHeaderHeight:Round(Value(Coalesce(LookUp(Parent.Options, key = "gantt.rowHeaderHeight").value,"40")),3),
                                                                                        columnHeaderWidth: Round(Value(Coalesce(LookUp(Parent.Options, key = "gantt.columnHeaderWidth").value,"80")),3),
            
                                                                                        rowHeaderColor: Coalesce(LookUp(Parent.Options, key = "gantt.fontColor").value,"#5a5252"),
                                                                                        columnHeaderColor: Coalesce(LookUp(Parent.Options, key = "gantt.fontColor").value,"#1b1919"),
            
                                                                                        rowHeaderFontSize: Coalesce(LookUp(Parent.Options, key = "gantt.rowHeaderFontSize").value,"12"),
                                                                                        columnHeaderFontSize: Coalesce(LookUp(Parent.Options, key = "gantt.columnHeaderFontSize").value,"12"),
                                                                                        
                                                                                        separateBy:LookUp(Parent.Options, key="gantt.type").value,
                                                                                        startDate: DateValue(LookUp(Parent.Options, key="gantt.startDate").value),
                                                                                        endDate: DateValue(LookUp(Parent.Options, key="gantt.endDate").value)
                                                                                    })
                                                                                    , "newStartDate"
                                                                                    , If(separateBy = "month", Date(Year(startDate), Month(startDate), 1), startDate)
                                                                                    , "newEndDate"
                                                                                    , If(separateBy = "month"
                                                                                                , If(DateDiff(startDate, endDate, TimeUnit.Years) > 0,
                                                                                                    DateAdd(DateValue("01/01/" & Text(Year(endDate))), -1),
                                                                                                    DateAdd(DateAdd(endDate, 1, TimeUnit.Months), 0 - Day(endDate)))
            
                                                                                                , If(Mod(DateDiff(startDate, endDate, TimeUnit.Days) + 1,7) > 0
                                                                                                        , DateAdd(endDate, 7 - Mod(DateDiff(startDate, endDate, TimeUnit.Days) + 1,7))
                                                                                                        , endDate)
                                                                                        )
                                                                                    )
                                                                        ,"columnsCount"
                                                                        , If(separateBy = "month"
                                                                                , DateDiff(newStartDate, newEndDate, TimeUnit.Months) + 1
                                                                                , DateDiff(newStartDate, newEndDate, TimeUnit.Days)/7
                                                                            )
                                                                        , "allDays"
                                                                        , DateDiff(newStartDate, newEndDate) + 1
                                                                    )
                                                                    , "rlabels"
                                                                    , If(separateBy = "month"
                                                                            , ForAll(FirstN(indexes, columnsCount), Text(DateAdd(newStartDate, index-1, TimeUnit.Months),"[$-en-US]mmm"))
                                                                            , ForAll(FirstN(indexes, columnsCount), "Week" & Text(index))
                                                                        )
                                                )
                                                ,"step"
                                                ,Min(LookUp(Parent.Options, key="gantt.step").value, CountRows(rlabels))
                                            ),
                                    Concat(AddColumns(
                                                Table({
                                                    row:
                                                        {
                                                            x1: padLeft,
                                                            y1: padTop,
                                                            x2: width - padRight,
                                                            y2: padTop,
                                                            lineWidth: Round(Value(Coalesce(LookUp(Parent.Options, key = "row.lineWidth").value,"1")),3),
                                                            lineColor: Coalesce(LookUp(Parent.Options, key = "gantt.lineColor").value,"#5ec16c"),
                                                            height: Min(Round(Value(Coalesce(LookUp(Parent.Options, key = "gantt.rowHeight").value, Text((height - padTop - rowHeaderHeight)/CountRows(clabels)))), 3),
                                                                        Round((height - padTop - rowHeaderHeight)/CountRows(clabels), 3))
                                                        },
                                                    contentWidth: width - padLeft -padRight - columnHeaderWidth
                                                }),
                                                "column",
                                                {
                                                    x1:padLeft,
                                                    y1: padTop,
                                                    x2: padLeft,
                                                    y2: Min(height, rowHeaderHeight + row.height * CountRows(clabels) + padTop),
                                                    lineWidth: Round(Value(Coalesce(LookUp(Parent.Options, key = "column.lineWidth").value,"1")),3),
                                                    lineColor: Coalesce(LookUp(Parent.Options, key = "gantt.lineColor").value,"#946eb0"),
                                                    width: Round(Value(Coalesce(LookUp(Parent.Options, key = "column.width").value, Text((width - padLeft -padRight - columnHeaderWidth)/CountRows(rlabels)))), 3)
                                                }),
                                                //row lines
                                                "<g id='rowGroup'>"
                                                & " <style>.line{stroke: " & row.lineColor & ";stroke-width: " & row.lineWidth & ";}</style>"
                                                & "<line x1='" & row.x1 & "' y1='" & row.y1 & "' x2 = '" & row.x2 & "' y2 = '" & row.y2  & "'  transform='translate(0,0)' class='line' />"  
                                                & "<line x1='" & row.x1 & "' y1='" & row.y1 & "' x2 = '" & row.x2 & "' y2 = '" & row.y2 & "'  transform='translate(0,"  & rowHeaderHeight & ")' class='line' />"  
                                                & Concat( ForAll(FirstN(indexes, CountRows(clabels)),
                                                                        {
                                                                            transform: rowHeaderHeight + index * row.height
                                                                        }
                                                                ),
                                                                "<line x1='" & row.x1 & "' y1='" & row.y1 & "' x2 = '" & row.x2 & "' y2 = '" & row.y2 & "'  transform='translate(0,"  & transform & ")' class='line' />"
                                                )
                                                & "</g>"
                                                //column lines
                                                &"<g id='columnGroup'>"
                                                &" <style>.cline{stroke: " & column.lineColor & ";stroke-width: " & column.lineWidth & ";}</style>"
                                                & "<line x1='" & column.x1 & "' y1='" & column.y1 & "' x2 = '" & column.x2 & "' y2 = '" & column.y2  & "'  transform='translate(0,0)' class='cline' />"  
                                                & "<line x1='" & column.x1 & "' y1='" & column.y1 & "' x2 = '" & column.x2 & "' y2 = '" & column.y2 & "'  transform='translate("  & columnHeaderWidth & ", 0)' class='cline' />" 
                                                & Concat(ForAll(FirstN(indexes, CountRows(rlabels)),If(separateBy = "month"
                                                                                                            , { x1: column.x1 + columnHeaderWidth + Round( (DateDiff(newStartDate, DateAdd(Date(Year(newStartDate), Month(newStartDate)+index, 1), -1)) + 1)/allDays * contentWidth, 3),
                                                                                                                y1: If( Mod(index, step) > 0 && Not(index = CountRows(rlabels)), column.y1 + rowHeaderHeight, column.y1),
                                                                                                                y2: column.y2}
                                                                                                            , { x1: column.x1 + columnHeaderWidth + index * column.width,
                                                                                                                y1: If( Mod(index, step) > 0 && Not(index = CountRows(rlabels)), column.y1 + rowHeaderHeight, column.y1),
                                                                                                                y2: column.y2}
                                                        )),
                                                        "<line x1='" 
                                                        & x1 & "' y1='" 
                                                        & y1 & "' x2 = '" 
                                                        & x1 & "' y2 = '" 
                                                        & y2 & "' class='cline' />"
                                                        )
                                                &"</g>"
            
                                                // rowheaders
                                                &"<g>"
                                                &"<style>" &
                                                    ".rowheader{ font-size: "& rowHeaderFontSize & "px; fill:" & rowHeaderColor & "}"&
                                                "</style>"
                                                &Concat( AddColumns( Filter(ForAll( FirstN(indexes, CountRows(rlabels)),
                                                                                            {
                                                                                                cellx: row.x1 + columnHeaderWidth + column.width * (index -1),
                                                                                                celly: row.y1 + Round(rowHeaderHeight/2,3),
                                                                                                celllable: Last(FirstN(rlabels,index)).Value,
                                                                                                cellIndex: (index-1)/step,
                                                                                                //cellWidth: column.width * step,
                                                                                                cellHeight: rowHeaderHeight,
                                                                                                enabled: If(Mod(index-1, step) = 0, "1", "0")
                                                                                            } 
                                                                                    ), enabled = "1")
                                                                    ,"cellWidth"
                                                                    ,Round( If( (cellIndex + 1) * step <= CountRows(rlabels), column.width * step ,  column.width * (CountRows(rlabels) - cellIndex * step) ), 3)
                                                                    ), 
                                                                    "<text class='rowheader' dominant-baseline='middle' text-anchor='middle' x='" & (cellx + Round(cellWidth/2,3)) & "' y='" & celly & "'>"
                                                                    & celllable
                                                                    & "</text>"
                                                        )
                                                &"</g>"
            
                                                //columnheaders
                                                &"<g>"
                                                &"<style>" &
                                                    ".columnheader{ font-size: "& columnHeaderFontSize & "px; fill:" & columnHeaderColor & "}"&
                                                "</style>"
                                                &Concat( ForAll( FirstN(indexes, CountRows(clabels)),
                                                                        {
                                                                            cellx: row.x1 + Round(columnHeaderWidth/2,3),
                                                                            celly: row.y1 + rowHeaderHeight + row.height * (index -1) + Round(row.height/2,3),
                                                                            celllable: Last(FirstN(clabels,index)).Value,
                                                                            cid: index
                                                                        }
                                                                    ), 
                                                                    "<text class='columnheader' dominant-baseline='middle' text-anchor='middle' x='" & cellx & "' y='" & celly & "'>"
                                                                    & celllable
                                                                    & "</text>"
            
                                                        )
                                                &"</g>"
                                                &"<g>"
                                                //shaps
                                                &Concat(AddColumns(AddColumns(ForAll(Filter(intervals, DateDiff( DateValue(start), DateValue(end)) > 0 
                                                                                                && process <= CountRows(clabels) 
                                                                                                && DateDiff(newStartDate, DateValue(end)) >=0 
                                                                                                && DateDiff(DateValue(start), newEndDate) >=0 ), 
                                                                                    {
                                                                                        processIndex: process,
                                                                                        colorId: colorindex,
                                                                                        intervalH: Round(Value(Coalesce(LookUp(Parent.Options, key = "gantt.barHeight").value,"16")),3),
                                                                                        intervalStartDate: If(DateDiff(DateValue(start),newStartDate) >= 0, newStartDate, DateValue(start)),
                                                                                        intervalEndDate: If(DateDiff(newEndDate, DateValue(end)) >=0, newEndDate, DateValue(end))       
                                                                                    }
                                                                            )
                                                                            , "intervalFill"
                                                                            , If(colorId <=CountRows(colors),Last(FirstN(colors,colorId)).color, "#ff0000")
                                                                            , "intervalStartWidth"
                                                                            , Round(DateDiff( newStartDate, intervalStartDate)/allDays * contentWidth, 3)
                                                                            , "intervalEndWidth"
                                                                            , Round((DateDiff( newStartDate, intervalEndDate) + 1) /allDays * contentWidth, 3)
                                                                        )
                                                                        , "intervalX"
                                                                        , (row.x1 + columnHeaderWidth + intervalStartWidth)
                                                                        , "intervalY"
                                                                        , If(row.height >= intervalH, Round((row.height - intervalH)/2, 3), 0) + (row.y1 + rowHeaderHeight) + row.height * (processIndex -1)
                                                                        , "intervalwidth"
                                                                        , intervalEndWidth - intervalStartWidth
                                                                        , "intervalheight"
                                                                        , Min(row.height,intervalH)
                                                        ), 
                                                        "<rect rx='5' ry='5' x='"
                                                        & intervalX
                                                        & "' y='"
                                                        & intervalY
                                                        & "' width='"
                                                        & intervalwidth
                                                        & "' height='"
                                                        & intervalheight
                                                        & "' style='fill:"
                                                        & intervalFill
                                                        & "' />"
                                                    )
                                                &"</g>"
                                    )
                            ),
                        "</svg>"
                    ),
                    "%", "%25"), "<", "%3C"), ">", "%3E"), "#", "%23"), "{", "%7B"), "}", "%7D")
            )
        PressedBorderColor: =ColorFade(Gantt.BorderColor, -20%)
        PressedFill: =ColorFade(Gantt.Fill, -20%)
        Width: =Round(Parent.Width - If(Parent.Legend.enabled && (Parent.Legend.placement = "left" || Parent.Legend.placement = "right"),Parent.Legend.width,0),3)
        X: =Round(If(Parent.Legend.enabled && Parent.Legend.placement = "left", Parent.Legend.width,0),3)
        Y: =Round(GanttHeader.Height + If(Parent.Legend.enabled && Parent.Legend.placement = "top", Parent.Legend.height, 0), 3)
        ZIndex: =2

    GanttHeader As image:
        FocusedBorderColor: =GanttHeader.BorderColor
        Height: =Parent.Title.paddingTop + Parent.Title.height + If(IsBlank(Parent.Subtitle.text), 0, Parent.Subtitle.paddingTop + Parent.Subtitle.height)
        HoverBorderColor: =ColorFade(GanttHeader.BorderColor, 20%)
        HoverFill: =ColorFade(GanttHeader.Fill, 20%)
        Image: |-
            = Substitute(Substitute(Substitute(Substitute(Substitute(Substitute(
                Concatenate(
                    "data:image/svg+xml;charset=utf8,", 
                    "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 " & GanttHeader.Width & " " & GanttHeader.Height & "'>",
                    If(!IsBlank(Parent.Title.text), Concatenate(
                        "<g>",
                            "<text x='" & Round(Switch(Parent.Title.align,"left",0,"right", GanttHeader.Width, GanttHeader.Width/2),3) & "' " &
                                    "y='" & Parent.Title.paddingTop & "' " &
                                    "dy='1em' " &
                                    "text-anchor='" & Switch(Parent.Title.align,"left","start","right","end","middle") &"'>" &
                                "<tspan style='" &
                                        "fill:" & Parent.Title.color & ";" &
                                        "font-size:" & Parent.Title.fontSize & "px;" &
                                        "font-family:" & Parent.Title.fontFamily & ";" &
                                        "font-weight:" & Parent.Title.fontWeight & ";" &
                                        "font-style:" & Parent.Title.fontStyle & ";" & Parent.Title.additionalStyles & "'>" &
                                    Parent.Title.text &
                                "</tspan>",
                                If(!IsBlank(Parent.Subtitle.text), 
                                    "<tspan " & Switch(Parent.Subtitle.align,
                                                "left","text-anchor='start' x='0' ",
                                                "right","text-anchor='end' x='" & Round(GanttHeader.Width,3) & "' ",
                                                "center","x='" & Round(GanttHeader.Width/2,3) & "' ") &
                                            "y='" & (Parent.Title.paddingTop + Parent.Title.height + Parent.Subtitle.paddingTop) & "' " &
                                            "dy='0em' " &
                                            "style='" &
                                        "fill:" & Parent.Subtitle.color & ";" &
                                        "font-size:" & Parent.Subtitle.fontSize & "px;" &
                                        "font-family:" & Parent.Subtitle.fontFamily & ";" &
                                        "font-weight:" & Parent.Subtitle.fontWeight & ";" &
                                        "font-style:" & Parent.Subtitle.fontStyle & ";" & Parent.Subtitle.additionalStyles & "'>" &
                                        Parent.Subtitle.text &
                                    "</tspan>"),
                            "</text>",
                        "</g>"
                    )),
                    "</svg>"
                ),
            "%", "%25"), "<", "%3C"), ">", "%3E"), "#", "%23"), "{", "%7B"), "}", "%7D")
        PressedBorderColor: =ColorFade(GanttHeader.BorderColor, -20%)
        PressedFill: =ColorFade(GanttHeader.Fill, -20%)
        Width: =Parent.Width
        ZIndex: =3

